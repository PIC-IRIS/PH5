#!/usr/local/bin/python
"""@package KefParser
The KefParser module contains the KefParser class which can be used
to create an instance of a kefparser.


"""

import KefTable

class KefSyntaxError(Exception):
    def __init__(self, line_number):
        self.line_number = line_number

    def __str__(self):
        return self.line_number        

class KefFileTypeError(Exception):
    def __init__(self, filename):
        self.filename = filename

    def __str__(self):
        return self.filename


class KefParser:
    """The kef parser does two things: 
    1) Parses .kef files and  2) stores the info in a table.

    The parser takes in the main GUI and a dictionary for storing
    info about the kef file being parsed.
    The GUI is a PyQt object.
    The info Dictionary contains three entries: Rows, Columns and Lines
    """
    def __init__(self):
        pass
    
    def parse(self, filename):
        """Parses a .kef file; return table"""

        if self.__not_kef(filename):
            raise KefFileTypeError(filename)


        with open(filename, 'r') as kefFile:
            return self.parseFile(kefFile)
            

    def parseFile(self, kefFile):
        """ Parses an open kef file. This will also parse an iterable
        of lines of a kef file. Returns the resulting table"""

        table = KefTable.KefTable()
        lines = 0
        
        for line in kefFile:
            lines += 1
            
            if line.startswith("#") or line.startswith("\n"): 
                pass
            elif line.startswith("/"):
                table.fields.append(self.__clean(line))
                table.rows += 1
            elif line.startswith("\t"):
                key,value = self.__extract_key_value(line)
                table.values.setdefault(key,[]).append(value)
            else:
                raise KefSyntaxError(lines)

        table.set_info()
        return table

    def __not_kef(self, filename):
        """Use to if a filename ends with .kef"""
        return not filename.lower().endswith('.kef')

    def __clean(self, line):
        """Use to remove update/delete info from line"""
        return line.strip().split(':')[0]
    
    def __extract_key_value(self, line):
        """Use on line of the form key = value to get (key,value)"""
        values = line.split('=')
        return values[0].strip(),values[1].strip()
