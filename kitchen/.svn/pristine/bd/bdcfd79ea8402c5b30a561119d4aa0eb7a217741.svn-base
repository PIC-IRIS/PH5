
import os,sys
from twisted.internet import reactor, utils
from twisted.internet.protocol import ProcessProtocol

PROG_VERSION = "2013.021"

DEBUG = True

class PH5ProcessProtocol(ProcessProtocol):

    # Will get called when the subprocess has data on stdout
    def outReceived(self, data):
        print data
    
    # Will get called when the subprocess has data on stderr
    def errReceived(self, data):
        print  data

    # Will get called when the subprocess starts
    def connectionMade(self):
        print 'Started running subprocess'

    # Will get called when the subprocess ends
    def processEnded(self, reason):
        print 'Completed running subprocess'
	
	
# Spawn the process and copy across the environment
def run(command, args):    
    #cmd =  os.path.join (os.environ['K3'], "apps", "pn3", command)
    #print cmd
    #reactor.spawnProcess(PH5ProcessProtocol(), cmd, args, os.environ)
    cmd =  os.path.join (os.environ['K3'], "apps", "pn3", command)
    if DEBUG == True : print cmd, args
    reactor.spawnProcess(PH5ProcessProtocol(), cmd, args, os.environ)

   
    



