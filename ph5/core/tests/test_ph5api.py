'''
Tests for ph5api
'''

import unittest
from ph5.core import ph5api


class TestPH5API(unittest.TestCase):

    def setUp(self):
        self.ph5API_object = ph5api.PH5(path='ph5/test_data/ph5',
                                        nickname='master.ph5')

    def test_load_ph5(self):
        """
        Tries to load the PH5 test file.
        Checks if it is an instance of ph5.core.ph5api.PH5
        """
        self.assertTrue(isinstance(self.ph5API_object, ph5api.PH5))
        self.assertTrue(self.ph5API_object.ph5.isopen)

    def test_experiment_t(self):
        """
        check reading of experiment table
        """

        # experiment table is initally empty
        self.assertIsNone(self.ph5API_object.Experiment_t)
        # load experiment table and it shouldn't be empty

        self.ph5API_object.read_experiment_t()
        self.assertIsNotNone(self.ph5API_object.Experiment_t)

        # keys should match
        keys = ['experiment_id_s', 'net_code_s', 'nickname_s', 'longname_s',
                'PIs_s', 'institutions_s', 'north_west_corner/X/value_d',
                'north_west_corner/X/units_s', 'north_west_corner/Y/value_d',
                'north_west_corner/Y/units_s', 'north_west_corner/Z/value_d',
                'north_west_corner/Z/units_s',
                'north_west_corner/coordinate_system_s',
                'north_west_corner/projection_s',
                'north_west_corner/ellipsoid_s',
                'north_west_corner/description_s',
                'south_east_corner/X/value_d', 'south_east_corner/X/units_s',
                'south_east_corner/Y/value_d', 'south_east_corner/Y/units_s',
                'south_east_corner/Z/value_d', 'south_east_corner/Z/units_s',
                'south_east_corner/coordinate_system_s',
                'south_east_corner/projection_s',
                'south_east_corner/ellipsoid_s',
                'south_east_corner/description_s', 'summary_paragraph_s',
                'time_stamp/ascii_s', 'time_stamp/epoch_l',
                'time_stamp/micro_seconds_i', 'time_stamp/type_s']
        self.assertEqual(keys, self.ph5API_object.Experiment_t['keys'])

        # expect only one row in experiment table
        self.assertEqual(1, len(self.ph5API_object.Experiment_t['rows']))

        # make sure experiment table matches what we think it should
        experiment_t = self.ph5API_object.Experiment_t['rows']
        experiment_t[0]['net_code_s']
        self.assertEqual(experiment_t[0]['net_code_s'], 'AA')
        self.assertEqual(experiment_t[0]['experiment_id_s'], '99-999')
        self.assertEqual(experiment_t[0]['nickname_s'], 'PH5 Test')
        self.assertEqual(experiment_t[0]['longname_s'], 'PH5 TEST SET')
        self.assertEqual(experiment_t[0]['PIs_s'], 'Derick Hess')
        self.assertEqual(experiment_t[0]['institutions_s'], 'PASSCAL')

    def test_array_t(self):

        # make sure array_t_names is empty then load them
        # and make sure they match expected array names
        self.assertFalse(self.ph5API_object.Array_t_names)
        self.ph5API_object.read_array_t_names()
        self.assertTrue(self.ph5API_object.Array_t_names)
        self.assertTrue('Array_t_001' in self.ph5API_object.Array_t_names)
        self.assertEqual([1, 2, 3],
                         self.ph5API_object.channels_Array_t('Array_t_001'))
        self.assertTrue('Array_t_002' in self.ph5API_object.Array_t_names)
        self.assertEqual([1],
                         self.ph5API_object.channels_Array_t('Array_t_002'))
        self.assertTrue('Array_t_003' in self.ph5API_object.Array_t_names)
        self.assertEqual([1],
                         self.ph5API_object.channels_Array_t('Array_t_003'))
        self.assertTrue('Array_t_004' in self.ph5API_object.Array_t_names)
        self.assertEqual([-2],
                         self.ph5API_object.channels_Array_t('Array_t_004'))
        self.assertTrue('Array_t_008' in self.ph5API_object.Array_t_names)
        self.assertEqual([1, 2, 3],
                         self.ph5API_object.channels_Array_t('Array_t_008'))
        self.assertTrue('Array_t_009' in self.ph5API_object.Array_t_names)
        self.assertEqual([1],
                         self.ph5API_object.channels_Array_t('Array_t_009'))

        # now test to see if certain value are in each array as expected

        # checking 3rd channel of array 1... auto generated by segdtoph5
        self.assertFalse(hasattr(self.ph5API_object.Array_t, 'Array_t_001'))
        self.ph5API_object.read_array_t('Array_t_001')

        # check keys
        keys = ['id_s', 'location/X/value_d', 'location/X/units_s',
                'location/Y/value_d', 'location/Y/units_s',
                'location/Z/value_d', 'location/Z/units_s',
                'location/coordinate_system_s', 'location/projection_s',
                'location/ellipsoid_s', 'location/description_s',
                'deploy_time/ascii_s', 'deploy_time/epoch_l',
                'deploy_time/micro_seconds_i', 'deploy_time/type_s',
                'pickup_time/ascii_s', 'pickup_time/epoch_l',
                'pickup_time/micro_seconds_i', 'pickup_time/type_s',
                'das/serial_number_s', 'das/model_s', 'das/manufacturer_s',
                'das/notes_s', 'sensor/serial_number_s', 'sensor/model_s',
                'sensor/manufacturer_s', 'sensor/notes_s', 'description_s',
                'seed_band_code_s', 'sample_rate_i',
                'sample_rate_multiplier_i', 'seed_instrument_code_s',
                'seed_orientation_code_s', 'seed_location_code_s',
                'seed_station_name_s', 'channel_number_i',
                'receiver_table_n_i', 'response_table_n_i']

        self.assertEqual(keys,
                         self.ph5API_object.Array_t['Array_t_001']['keys'])

        self.assertEqual([1, 2, 3],
                         self.ph5API_object.channels('Array_t_001', '500'))
        channel = self.ph5API_object.Array_t['Array_t_001']['byid']\
            .get('500').get(3)
        self.assertEqual(channel[0]['id_s'], '500')
        self.assertEqual(channel[0]['seed_station_name_s'], '500')
        self.assertEqual(channel[0]['das/serial_number_s'], '3X500')
        self.assertEqual(channel[0]['location/X/value_d'], -105.405489539)
        self.assertEqual(channel[0]['location/Y/value_d'], 47.6790599342)
        self.assertEqual(channel[0]['location/Z/value_d'], 0.0)
        self.assertEqual(channel[0]['das/model_s'], 'ZLAND 3C')
        self.assertEqual(channel[0]['sample_rate_i'], 500)
        self.assertEqual(channel[0]['sample_rate_multiplier_i'], 1)
        self.assertEqual(channel[0]['seed_band_code_s'], 'D')
        self.assertEqual(channel[0]['seed_instrument_code_s'], 'P')
        self.assertEqual(channel[0]['seed_orientation_code_s'], 'Z')
        self.assertEqual(channel[0]['receiver_table_n_i'], 0)
        self.assertEqual(channel[0]['response_table_n_i'], 8)
        self.assertEqual(channel[0]['channel_number_i'], 3)

        # checking 1st channel of array 2... auto generated by obsoytoph5

        self.assertFalse(hasattr(self.ph5API_object.Array_t, 'Array_t_002'))
        self.assertEqual([1],
                         self.ph5API_object.channels('Array_t_002', '0407'))
        self.ph5API_object.read_array_t('Array_t_002')
        channel = self.ph5API_object.Array_t['Array_t_002']['byid'] \
            .get('0407').get(1)
        self.assertEqual(channel[0]['id_s'], '0407')
        self.assertEqual(channel[0]['seed_station_name_s'], '0407')
        self.assertEqual(channel[0]['das/serial_number_s'], '5553')
        self.assertEqual(channel[0]['location/X/value_d'], 94.88888)
        self.assertEqual(channel[0]['location/Y/value_d'], 73.77777)
        self.assertEqual(channel[0]['location/Z/value_d'], 90.0)
        self.assertEqual(channel[0]['sample_rate_i'], 200)
        self.assertEqual(channel[0]['sample_rate_multiplier_i'], 1)
        self.assertEqual(channel[0]['seed_band_code_s'], 'H')
        self.assertEqual(channel[0]['seed_instrument_code_s'], 'H')
        self.assertEqual(channel[0]['seed_orientation_code_s'], 'N')
        self.assertEqual(channel[0]['receiver_table_n_i'], 1)
        self.assertEqual(channel[0]['response_table_n_i'], 5)
        self.assertEqual(channel[0]['channel_number_i'], 1)

        # checking 1st channel of array 4... auto generated by obsoytoph5
        # LOG so channel -2
        self.assertFalse(hasattr(self.ph5API_object.Array_t, 'Array_t_004'))
        self.assertEqual([-2],
                         self.ph5API_object.channels('Array_t_004', '0407'))
        self.ph5API_object.read_array_t('Array_t_004')
        channel = self.ph5API_object.Array_t['Array_t_004']['byid'] \
            .get('0407').get(-2)
        self.assertEqual(channel[0]['id_s'], '0407')
        self.assertEqual(channel[0]['seed_station_name_s'], '0407')
        self.assertEqual(channel[0]['das/serial_number_s'], '5553')
        self.assertEqual(channel[0]['location/X/value_d'], 94.88888)
        self.assertEqual(channel[0]['location/Y/value_d'], 73.77777)
        self.assertEqual(channel[0]['location/Z/value_d'], 90.0)
        self.assertEqual(channel[0]['sample_rate_i'], 0)
        self.assertEqual(channel[0]['sample_rate_multiplier_i'], 1)
        self.assertEqual(channel[0]['seed_band_code_s'], 'L')
        self.assertEqual(channel[0]['seed_instrument_code_s'], 'O')
        self.assertEqual(channel[0]['seed_orientation_code_s'], 'G')
        self.assertEqual(channel[0]['receiver_table_n_i'], 1)
        self.assertEqual(channel[0]['response_table_n_i'], 7)
        self.assertEqual(channel[0]['channel_number_i'], -2)

        # checking 2nd channel of array 8... hand created loaded by keftoph5
        self.assertFalse(hasattr(self.ph5API_object.Array_t, 'Array_t_008'))
        self.assertEqual([1, 2, 3],
                         self.ph5API_object.channels('Array_t_008', '8001'))
        self.ph5API_object.read_array_t('Array_t_008')
        channel = self.ph5API_object.Array_t['Array_t_008']['byid'] \
            .get('8001').get(2)
        self.assertEqual(channel[0]['id_s'], '8001')
        self.assertEqual(channel[0]['seed_station_name_s'], '8001')
        self.assertEqual(channel[0]['das/serial_number_s'], '9EEF')
        self.assertEqual(channel[0]['location/X/value_d'], -106.916169)
        self.assertEqual(channel[0]['location/Y/value_d'], 34.154673)
        self.assertEqual(channel[0]['location/Z/value_d'], 1403.0)
        self.assertEqual(channel[0]['sample_rate_i'], 100)
        self.assertEqual(channel[0]['sample_rate_multiplier_i'], 1)
        self.assertEqual(channel[0]['seed_band_code_s'], 'H')
        self.assertEqual(channel[0]['seed_instrument_code_s'], 'L')
        self.assertEqual(channel[0]['seed_orientation_code_s'], '1')
        self.assertEqual(channel[0]['receiver_table_n_i'], 1)
        self.assertEqual(channel[0]['response_table_n_i'], 8)
        self.assertEqual(channel[0]['channel_number_i'], 2)

        # array shouldn't have station 0407
        self.assertEqual([],
                         self.ph5API_object.channels('Array_t_008', '0407'))
        # array 9 should have channels
        self.assertNotEqual([],
                            self.ph5API_object.channels('Array_t_009',
                                                        '9001'))
        # array 1 should have channels
        self.assertNotEqual([],
                            self.ph5API_object.channels_Array_t(
                                'Array_t_001'))
        # no array 0
        self.assertFalse('Array_t_000' in self.ph5API_object.Array_t_names)

        # no array 5
        self.assertFalse('Array_t_005' in self.ph5API_object.Array_t_names)

    def test_index_t(self):
        """
        Test reading of index table and checking contents
        """
        # able to read index table
        self.assertFalse(self.ph5API_object.Index_t)
        self.ph5API_object.read_index_t()
        self.assertTrue(self.ph5API_object.Index_t)

        # it contains keys adn they are correct
        self.assertTrue(self.ph5API_object.Index_t['keys'])
        keys = ['end_time/ascii_s', 'end_time/epoch_l',
                'end_time/micro_seconds_i', 'end_time/type_s',
                'external_file_name_s', 'hdf5_path_s', 'serial_number_s',
                'start_time/ascii_s', 'start_time/epoch_l',
                'start_time/micro_seconds_i', 'start_time/type_s',
                'time_stamp/ascii_s', 'time_stamp/epoch_l',
                'time_stamp/micro_seconds_i', 'time_stamp/type_s']
        self.assertEqual(keys, self.ph5API_object.Index_t['keys'])

        # are there as many rows as we expect?
        self.assertEqual(11, len(self.ph5API_object.Index_t['rows']))

        # check row 6.
        self.assertEqual('3X500',
                         self.ph5API_object.Index_t['rows'][5]
                         ['serial_number_s'])

    def test_receiver_t(self):
        """
        test reading receiver table
        :return:
        """
        # able to read index table
        self.assertFalse(self.ph5API_object.Receiver_t)
        self.ph5API_object.read_receiver_t()
        self.assertTrue(self.ph5API_object.Receiver_t)
        keys = ['orientation/azimuth/value_f',
                'orientation/azimuth/units_s',
                'orientation/dip/value_f',
                'orientation/dip/units_s',
                'orientation/description_s',
                'orientation/channel_number_i']
        self.assertEqual(keys, self.ph5API_object.Receiver_t['keys'])

        # expect 4 rows in receiver table
        self.assertEqual(4, len(self.ph5API_object.Receiver_t['rows']))

        # get each receiver table entry by it's n_i number
        table = self.ph5API_object.get_receiver_t_by_n_i(0)
        self.assertEqual(0.0, table['orientation/azimuth/value_f'])
        self.assertEqual(90.0, table['orientation/dip/value_f'])
        self.assertEqual('Z', table['orientation/description_s'])
        table = self.ph5API_object.get_receiver_t_by_n_i(1)
        self.assertEqual(0.0, table['orientation/azimuth/value_f'])
        self.assertEqual(0.0, table['orientation/dip/value_f'])
        self.assertEqual('N', table['orientation/description_s'])
        table = self.ph5API_object.get_receiver_t_by_n_i(2)
        self.assertEqual(90.0, table['orientation/azimuth/value_f'])
        self.assertEqual(0.0, table['orientation/dip/value_f'])
        self.assertEqual('E', table['orientation/description_s'])
        table = self.ph5API_object.get_receiver_t_by_n_i(3)
        self.assertEqual(0.0, table['orientation/azimuth/value_f'])
        self.assertEqual(-90.0, table['orientation/dip/value_f'])
        self.assertEqual('Z', table['orientation/description_s'])

    def test_das_t(self):
        # read in das group names
        self.assertFalse(self.ph5API_object.Das_g_names)
        self.ph5API_object.read_das_g_names()
        self.assertTrue(self.ph5API_object.Das_g_names)

        # check that all dases are there
        # rt125a das
        self.assertTrue('Das_g_12183' in self.ph5API_object.Das_g_names)
        # rt130 das
        self.assertTrue('Das_g_9EEF' in self.ph5API_object.Das_g_names)
        # Node das
        self.assertTrue('Das_g_3X500' in self.ph5API_object.Das_g_names)
        # miniSEED das
        self.assertTrue('Das_g_5553' in self.ph5API_object.Das_g_names)

        #  test various read methods
        # should NOT return anything
        table = self.ph5API_object.query_das_t('3X500',
                                               chan=8,
                                               start_epoch=1502293592,
                                               stop_epoch=1502309218,
                                               sample_rate=500,
                                               sample_rate_multiplier=1)
        self.assertFalse(table)

        # should return anything
        table = self.ph5API_object.query_das_t('3X500',
                                               chan=1,
                                               start_epoch=1502294430.380000,
                                               stop_epoch=1502309218,
                                               sample_rate=500,
                                               sample_rate_multiplier=1)
        self.assertTrue(table)
        self.assertEqual(1, len(table))
        # we should get the 2nd recording window
        self.assertEqual(2, table[0]['event_number_i'])

        # test query LOG channel
        table = self.ph5API_object.query_das_t('5553',
                                               chan=-2,
                                               start_epoch=1545088203,
                                               stop_epoch=1547489525,
                                               sample_rate=0,
                                               sample_rate_multiplier=1)
        self.assertTrue(table)
        self.assertEqual(1, len(table))
        # no samples in a textural LOG
        self.assertEqual(0, table[0]['sample_count_i'])

        # check read_das_t now

    def test_close_ph5(self):
        """
        close ph5 object

        """
        self.ph5API_object.close()
        self.assertIsNone(self.ph5API_object.ph5)

    def tearDown(self):
        self.ph5API_object.close()


if __name__ == "__main__":
    unittest.main()
