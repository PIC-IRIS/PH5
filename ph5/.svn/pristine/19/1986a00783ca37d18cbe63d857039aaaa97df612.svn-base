#!/usr/bin/env pnpython2
#
#   Read old style dep file and convert to new style
#
#   Read and insert elevations from geometry file
#

import sys, string, os

PROG_VERSION = '2007.192'

def _sign (latlon) :
    nsew = str (latlon[0])
    nsew.upper ()
    ret = latlon
    if nsew == 'N' or nsew == 'E' :
        ret = '+' + latlon[1:]
    elif nsew == 'S' or nsew == 'W' :
        ret = '-' + latlon[1:]
        
    return ret

def parseSHOT (line) :
    p = {}
    flds = string.split (line, ';')
    p['what'] = 'SHOT'
    p['S_id'] = string.strip (flds[1])                                     #   Shot ID
    p['S_station'] = string.strip (flds[2])                                #   Station name
    #   XXX   Need to pre-assign units_s   XXX
    p['S_coordinate_system'] = 'geodetic'
    p['S_projection'] = 'none'
    p['S_ellipsoid'] = 'wgs84'
    p['S_lat'] = string.strip (flds[3])                       #   Latitude
    p['S_lat_units'] = 'degrees'
    p['S_lon'] = string.strip (flds[4])                       #   Longitude
    p['S_lon_units'] = 'degrees'
    p['S_elev'] = string.strip (flds[5])                                   #   Elevation
    p['S_elev_units'] = 'meters'
    p['S_time'] = string.strip (flds[6])     #   
    p['S_line'] = "1"
    #p['S_epoch'] = epoch (yr, doy, hr, mn, sc)                        #   Time of the shot
    #p['ascii'] = time.strftime ("%a %b %H:%M:%S %Y", p['epoch'])
    #p['S_ascii'] = time.ctime (p['S_epoch'])                                 #   Time of the shot
    #p['S_type'] = columns.TIME_TYPE['BOTH']
    p['S_pre-trig'] = string.strip (flds[7])                               #   Pre-trigger length in seconds
    p['S_post-trig'] = string.strip (flds[8])                              #   Post-trigger length in seconds
    p['S_sr'] = ""
    p['S_depth'] = string.strip (flds[9])                                  #   Shot depth
    p['S_depth_units'] = 'meters'
    p['S_size'] = string.strip (flds[10])                                  #   Shot size (weight)
    p['S_rvel'] = ""
    p['S_radius'] = ""
    p['S_size_units'] = 'kilograms'
    try :
        p['S_comment'] = string.strip (flds[11])                           #   Comments
    except IndexError :
        p['S_comment'] = ""
        
    return p
        
def parseRECV (line) :
    p = {}
    flds = string.split (line, ';')
    p['what'] = 'RECV'
    p['R_id'] = string.strip (flds[1])                                     #   Receiver ID/serial number
    p['R_receiver-type'] = string.strip (flds[2])                          #   Receiver type
    p['R_chan'] = string.strip (flds[3])                                   #   Receiver channel number
    p['R_sensor'] = string.strip (flds[4])                                 #   Sensor ID/information
    p['R_station'] = string.strip (flds[5])                                #   Station flag number
    p['R_line'] = "1"
    p['R_lat'] = string.strip (flds[6])                      #   Latitude
    p['R_lat_units'] = 'degrees'
    p['R_lon'] = string.strip (flds[7])                      #   Longitude
    p['R_lon_units'] = 'degrees'
    p['R_elev'] = string.strip (flds[8])                                   #   Elevation
    p['R_elev_units'] = 'meters'
    p['R_array'] = string.strip (flds[9])                                  #   Line designation
    p['R_team'] = string.strip (flds[10])                                  #   Deployment group/team
    p['R_uphole'] = string.strip (flds[11])                                #   Was this an uphole instrument? (Y/N)
    p['R_deploy-time'] = string.strip (flds[12])

    p['R_pickup-time'] = string.strip (flds[13])

    p['R_shots'] = string.strip (flds[14])                                 #   Shot ID(s) covered by this entry
    try :
        p['R_comment'] = string.strip (flds[15])                           #   Comments
    except :
        p['R_comment'] = ""
    
    return p

def print_shot (ps) :
    for k in ps :
        print "%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s" % ("SHOT",
                                                                   k['S_id'],
                                                                   k['S_station'],
                                                                   k['S_line'],
                                                                   k['S_lat'],
                                                                   k['S_lon'],
                                                                   k['S_elev'],
                                                                   k['S_time'],
                                                                   k['S_pre-trig'],
                                                                   k['S_post-trig'],
                                                                   k['S_sr'],
                                                                   k['S_depth'],
                                                                   k['S_size'],
                                                                   k['S_rvel'],
                                                                   k['S_radius'],
                                                                   k['S_comment'])
        
def print_recv (pr) :
    global ELEV
    
    for k in pr :
        try :
            elev = ELEV[k['R_station']]
        except :
            elev = k['R_elev']
            
        print "%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s" % ("RECV",
                                                                   k['R_id'],
                                                                   k['R_station'],
                                                                   k['R_array'],
                                                                   k['R_receiver-type'],
                                                                   k['R_chan'],
                                                                   k['R_sensor'],
                                                                   k['R_uphole'],
                                                                   k['R_lat'],
                                                                   k['R_lon'],
                                                                   elev,
                                                                   k['R_team'],
                                                                   k['R_deploy-time'],
                                                                   k['R_pickup-time'],
                                                                   k['R_shots'],
                                                                   k['R_comment'])

def read (file) :
    ps = []
    pr = []
    
    fh = open (file)
    
    while 1 :
        line = fh.readline ()
        if not line : break
        if len (line) < 5 : continue
        
        #   User wants us to ignore this line
        if line[5] == 'X' :
            continue
        
        if line[0:4] == 'SHOT' :                
            p = parseSHOT (line)
            ps.append (p)
        elif line[0:4] == 'RECV' :
            p = parseRECV (line)
            pr.append (p)
        elif line[0:4] == 'MARK' :
            pass
        elif line[0:4] == 'TIME' :
            pass
        elif line[0:4] == 'BCSN' :
            pass
        else :
            continue
        
    print_shot (ps)
    print_recv (pr)
    fh.close ()
    
def read_geometry () :
    global ELEV
    ELEV = {}
    fh = open ("desire.geometry")
    
    while 1 :
        line = fh.readline ()
        if not line : break
        flds = string.split (line)
        site = string.strip (flds[0])
        height = string.strip (flds[4])
        ELEV[site] = height
        
    fh.close ()
        
if __name__ == '__main__' :
    read_geometry ()
    read (sys.argv[1])
