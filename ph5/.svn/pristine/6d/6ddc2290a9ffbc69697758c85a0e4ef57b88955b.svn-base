#!/usr/bin/env pnpython3

__author__ = "Randall R. Van Why Jr."
__copyright__ = "Copyright 2012, IRIS/PASSCAL"
__credits__ = ["Steve Azevedo", "Derick Hess", "Maxwell Hill"]
__license__ = "LGPL"
__version__ = "2013.025.b"
__maintainer__ = "Randall Van Why"
__email__ = ["rvan_why@nmt.edu","azevedo@passcal.nmt.edu"]
__status__ = "Production"

import os
import re
import sys
import time
import ftplib
import hashlib
import novitiate
import qt4reactor
from random import randint
from PyQt4 import QtGui, QtCore
from twisted.internet import ssl
from twistedclient import SocketClientFactory

PROG_VERSION = __version__

trdDirRE = re.compile ("(\d\d\d\d)(\d\d)(\d\d)\.(\d\d\d)")
sys.path.append(os.path.expanduser("~")+'/.kefscripts')

#For indexing purposes
LINENUM = 0
COLNUM = 1
ROWNUM = 2

#Kef Parsing
changes = {}
info = {"lines":0, "columns":0, "rows":0} #[LINENUM,COLNUM,ROWNUM]
labels = [] 
tableVals = {}


#Web
colors = {"interface":"#0000FF", "error":"#FF0000"}
ftpname = ""             
login = 'localhost'
password = '83e3cfe08c6b519634039e0b89bcc7a2'
SERVER_HOST = "jasper.passcal.nmt.edu"
SERVER_PORT = 50007
SSL = None
token = None

class MainWindow(QtGui.QWidget):
    def __init__(self, reactor):
        #Define window and layout
        QtGui.QMainWindow.__init__(self)
        mainLayout = QtGui.QVBoxLayout(self)
        self.table = QtGui.QTableWidget(self)
        self.edit = QtGui.QLineEdit(self)
        self.button = QtGui.QPushButton("Go", self)
        self.button.clicked.connect(self.replace)
        self.defineActions()
        self.filename = ""
        self.tablename = ""
        self.reactor = reactor
        self.wi = WebInterface(reactor)
        self.helpWin = HelpWindow()

        #Tabs
        tab_widget = QtGui.QTabWidget()
        tab1 = QtGui.QWidget()
        tab2 = QtGui.QWidget()
        tab1Layout = QtGui.QVBoxLayout(tab1)
        tab2Layout = QtGui.QVBoxLayout(tab2)
        tab_widget.addTab(tab1, "Editor")
        tab_widget.addTab(tab2, "Client Interface")

        #Define the toolbar
        toolBar = QtGui.QToolBar()
        fileButton = QtGui.QToolButton()
        fileButton.setText('File')
        fileButton.setPopupMode(QtGui.QToolButton.MenuButtonPopup)
        fileButton.setMenu(self.defineFileMenu())
        editButton = QtGui.QToolButton()
        editButton.setText('Edit')
        editButton.setPopupMode(QtGui.QToolButton.MenuButtonPopup)
        editButton.setMenu(self.defineEditMenu())
        helpButton = QtGui.QToolButton()
        helpButton.setText('Help')
        helpButton.setPopupMode(QtGui.QToolButton.MenuButtonPopup)
        helpButton.setMenu(self.defineHelpMenu())
        toolBar.addWidget(fileButton)
        toolBar.addWidget(editButton)
        toolBar.addWidget(helpButton)

        #Add widgets to layout
        mainLayout.addWidget(tab_widget)
        tab1Layout.addWidget(toolBar)
        tab1Layout.addWidget(self.table)
        tab1Layout.addWidget(self.edit)
        tab1Layout.addWidget(self.button)
        tab1Layout.addWidget(QtGui.QGroupBox())
        tab2Layout.addWidget(self.wi)

        self.setLayout(mainLayout)
        self.setGeometry(100, 100, 800, 600)
        self.setWindowTitle("KefEdit {0}".format (PROG_VERSION))
        self.wi.show()
        self.show()

    def defineFileMenu(self):
        fMenu = QtGui.QMenu(self)
        fMenu.addAction(self.fileOpenAct)
        fMenu.addAction(self.fileSaveAct)
        fMenu.addAction(self.fileCloseAct)
        fMenu.addAction(self.fileExitAct)
        return fMenu

    def defineEditMenu(self):
        eMenu = QtGui.QMenu(self)
        eMenu.addAction(self.editUpdateAct)
        eMenu.addAction(self.editDeleteAct)
        eMenu.addAction(self.editKeyAct)
        eMenu.addAction(self.editClearAct)
        eMenu.addAction(self.editScriptAct)
        return eMenu

    def defineHelpMenu(self):
        hMenu = QtGui.QMenu(self)
        hMenu.addAction(self.helpHelpAct)
        hMenu.addAction(self.helpAboutAct)
        return hMenu

    #These are just the function calls tied to the various menu buttons
    def defineActions(self):
        self.fileOpenAct = QtGui.QAction('Open', self, triggered=self.setData)
        self.fileOpenAct.setShortcut('Ctrl+O')
        self.fileSaveAct = QtGui.QAction('Save As...', 
                                         self, triggered=self.saveFile)
        self.fileSaveAct.setShortcut('Ctrl+S')
        self.fileCloseAct = QtGui.QAction('Close', 
                                          self, triggered=self.closeFile)
        self.fileExitAct = QtGui.QAction('Exit', 
                                         self, triggered=self.exitFile)

        self.editUpdateAct = QtGui.QAction('Mark cell(s) for update', 
                                           self, triggered=self.updateEdit)
        self.editUpdateAct.setShortcut('Ctrl+U')
        self.editDeleteAct = QtGui.QAction('Mark cell(s) for deletion',
                                           self, triggered=self.deleteEdit)
        self.editDeleteAct.setShortcut('Ctrl+D')
        self.editKeyAct = QtGui.QAction('Select Key', 
                                        self, triggered=self.keyEdit)
        self.editKeyAct.setShortcut('Ctrl+K')
        self.editClearAct = QtGui.QAction('Clear cell(s)', 
                                          self, triggered=self.clearEdit)
        self.editScriptAct = QtGui.QAction('Select modification Script', 
                                           self, triggered=self.scriptEdit)

        self.helpHelpAct = QtGui.QAction('KefEdit Help', 
                                         self, triggered=self.helpHelp)
        self.helpHelpAct.setShortcut('F1')
        self.helpAboutAct = QtGui.QAction('About', 
                                          self, triggered=self.aboutHelp)

    def openFile(self):
        filename = str(QtGui.QFileDialog.getOpenFileName())
        return filename

    def saveFile(self):
        outFilename = str(QtGui.QFileDialog.getSaveFileName())
        if not outFilename: return

        line = 1 
        done = False
        outfile = open(outFilename, "w")

        #For every row we have
        for i in changes.keys():
            if changes[int(i)][1]: 
                outfile.write("%s%s\n" % (self.tablename,changes[int(i)][0]))
            for j in range(info[COLNUM]):
                outfile.write( "\t%s = %s\n" % (labels[j], self.table.item(int(i),j).text()))
        outfile.close()

    #Clear all rows and remove header labels
    def closeFile(self):
        for i in range(info[ROWNUM]): self.table.removeRow(0)         
        self.table.horizontalHeader().setVisible(False)

    def exitFile(self):
        self.closeEvent("Exit")

    def updateEdit(self):
        items = self.table.selectedItems()
        for item in items:
            brush = QtGui.QBrush(QtGui.QColor(34, 139, 34))
            brush.setStyle(QtCore.Qt.SolidPattern)
            item.setBackground(brush)
            changes[item.row()] = [":Update:", False]

    def deleteEdit(self):
        items = self.table.selectedItems()
        for item in items:
            brush = QtGui.QBrush(QtGui.QColor(178, 34, 34))
            brush.setStyle(QtCore.Qt.SolidPattern)
            item.setBackground(brush)
            changes[item.row()] = [":Delete:", False]

    def keyEdit(self):
        key = self.table.selectedItems()
        if len(key) > 1:
            QtGui.QMessageBox.warning(self, "Error", self.tr("Please select only one key."))
            return
        if key[0].row() in changes:
            changes[key[0].row()][0] += labels[key[0].column()]
            brush = QtGui.QBrush(QtGui.QColor(255, 140, 0))
            brush.setStyle(QtCore.Qt.SolidPattern)
            key[0].setBackground(brush)
            changes[key[0].row()][1] = True
        else:
            QtGui.QMessageBox.warning(self, "Error", self.tr("Cannot select key for unmarked row!"))
            return

    def clearEdit(self):
        items = self.table.selectedItems()
        for item in items:
            if item.row() in changes:
                changes.pop(item.row())
            brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
            brush.setStyle(QtCore.Qt.SolidPattern)
            item.setBackground(brush)

    def scriptEdit(self):
        modules = getModules()
        text, ok = QtGui.QInputDialog.getItem(self, 'Kef Select', 
                                              'Pick a file', modules, 0, True)

        if not ok: return
        self.runMyMod(text.split('.')[0])

    def helpHelp(self):
        self.helpWin.show()

    def aboutHelp(self):
        QtGui.QMessageBox.about(self, self.tr("About KefEdit"),
                                self.tr("<b>KefEdit</b> Is a tool that can be used modify .kef files and mark "
                                        "them for updating. The data entry box supports regular expressions. "
                                        "Type <i>\'help\'</i> for usage information."
                                        "<br><br>(c)2012 IRIS/PASSCAL"))

    def parseKef(self, currentFile):
        gotTitle = False
        gotColnums = False
        beenWarned = False

        #If the extention is not .kef, raise error
        if self.filename[-4:] not in ('.kef','.KEF','.KeF','.kEF','.KEf','.keF','.Kef','.kEf'):
            QtGui.QMessageBox.warning(self, "Error", self.tr("File: %s<br><br>Is not at .kef file!" % self.filename))
            return 0

        #parse line by line, either #, /, or \t
        for line in currentFile:
            info[LINENUM] += 1
            if line.startswith("#"):
                pass
            elif line.startswith("\n"): pass
            elif line.startswith("/"):
                if gotTitle:
                    #If tablename contains update/delete info, raise warning
                    if len(line.strip().split(':')) > 1 and not beenWarned:
                        beenWarned = self.warning()
                    gotColnums = True       
                else:
                    self.tablename = line.strip().split(':')[0]
                    if len(self.tablename.split(':')) == 1:
                        self.setWindowTitle(self.tablename)
                        gotTitle = True
                    elif not beenWarned:
                        beenWarned = self.warning()

                info[ROWNUM] += 1
            elif line.startswith("\t"):
                values = line.split("=")

                if gotColnums:
                    tableVals[values[0].strip()].append(values[1].strip())
                else:
                    values[0] = values[0].strip()
                    values[1] = values[1].strip()
                    tableVals[values[0]] = [values[1]]
                    labels.append(values[0])
                    info[COLNUM] += 1  
            else:
                QtGui.QMessageBox.warning(self, "Error", 
                                          self.tr("In file: %s<br><br>Syntax error on line %d" % (self.filename, info[LINENUM])))
                return 0
        return 1

    #Sets the table and header labels and makes them visible
    def setData(self):
        del labels[:]
        global tableVals
        info[COLNUM] = 0
        info[ROWNUM] = 0
        info[LINENUM] = 0


        self.filename = self.openFile()

        if not self.filename:
            return

        try:
            currentFile = open(self.filename, "r").readlines()
        except IOError:
            QtGui.QMessageBox.warning(self, "Error", "Error reading file: %s" % self.filename)
            return

        parsed = self.parseKef(currentFile)
        self.table.clear()
        self.setHeaders()

        if not parsed:
            QtGui.QMessageBox.warning(self, "Error", "Parse failed.")
            return

        for j in range(info[ROWNUM]):
            for i in range(len(labels)):
                self.table.setItem(j, i, QtGui.QTableWidgetItem(tableVals[labels[i]][j]))

    #This function handles the regular expressions that the user may pass
    def replace(self):
        command = str(self.edit.text())
        PATTERN = re.compile(r'''((?:[^ "']|"[^"]*"|'[^']*')+)''')
        command = PATTERN.split(command)[1::2]

        if len(command) < 3:
            QtGui.QMessageBox.warning(self, "Error", "usage: column_name \"REGEX\" replacement")
            return
        elif not command[0] in labels:
            QtGui.QMessageBox.warning(self, "Error", "\"%s\" not found in table!" % command[0])
            return
        else:
            command[1] = command[1].strip("\"") 
            index = getIndex(command[0], labels)
            for i in range(info[ROWNUM]):
                if re.match(r"%s" % command[1], self.table.item(i, index).text()):
                    self.table.setItem(i,index,QtGui.QTableWidgetItem(command[2]))
                    brush = QtGui.QBrush(QtGui.QColor(169, 169, 169))
                    brush.setStyle(QtCore.Qt.SolidPattern)
                    self.table.item(i,index).setBackground(brush)

    def setHeaders(self):
        self.table.setColumnCount(info[COLNUM])
        self.table.setHorizontalHeaderLabels(labels)
        self.table.setRowCount(info[ROWNUM])
        self.table.horizontalHeader().setVisible(True)

    def closeEvent(self, e):
        if e == "Exit":
            message = QtGui.QMessageBox.question(self,'Quit', "Are you sure?\nAll unsaved data will be lost."
                                                 , QtGui.QMessageBox.Yes, QtGui.QMessageBox.No)
            if message == QtGui.QMessageBox.Yes:
                pass
            else:
                return
        else:
            message = QtGui.QMessageBox.question(self,'Quit', "Save changes before closing?"
                                                 , QtGui.QMessageBox.Yes, QtGui.QMessageBox.No)
            if message == QtGui.QMessageBox.Yes:
                self.saveFile()
            else:
                pass
        if token:
            self.wi.exit()
        self.reactor.stop()

    def warning(self):
        QtGui.QMessageBox.warning(self, "Warning", 
                                  self.tr("File: %s<br><br>Line %d contains update/delete information;"
                                          " This can cause errors." % (self.filename, info[LINENUM])))
        return True

    def runMyMod(self, module):
        global tableVals
        exec "import %s" % module
        exec "tableVals = %s.mymod(tableVals)" % module
        self.table.clear()
        self.setHeaders()

        for j in range(info[ROWNUM]):
            for i in range(len(labels)):
                self.table.setItem(j, i, QtGui.QTableWidgetItem(tableVals[labels[i]][j]))

class HelpWindow(QtGui.QWidget):
    def __init__(self, *args):
        QtGui.QWidget.__init__(self, *args)

        self.browser = QtGui.QTextBrowser()

        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.browser)
        docindex = os.path.join ('./documentation/index.html')
        self.browser.setSource(QtCore.QUrl(docindex))        

        self.setLayout(layout)

class LoginWindow(QtGui.QWidget):
    def __init__(self, *args):
        QtGui.QWidget.__init__(self, *args)

        #SERVER
        self.serverLabel = QtGui.QLabel()
        self.serverLabel.setText("Server Name:")
        self.serverBox = QtGui.QLineEdit(SERVER_HOST)

        #USER
        self.userLabel = QtGui.QLabel()
        self.userLabel.setText("User Name:")
        self.userBox = QtGui.QLineEdit(login)

        #PASSWORD
        self.passLabel = QtGui.QLabel()
        self.passLabel.setText("Password:")
        self.passBox = QtGui.QLineEdit("r3d4pple$")
        self.passBox.setEchoMode(QtGui.QLineEdit.Password)

        self.sslLabel = QtGui.QLabel()
        self.sslLabel.setText("Use SSL:")
        self.sslCheck = QtGui.QCheckBox()

        #Login window layout
        layout = QtGui.QVBoxLayout(self)

        layout.addWidget(self.serverLabel)
        layout.addWidget(self.serverBox)
        layout.addWidget(self.userLabel)
        layout.addWidget(self.userBox)        
        layout.addWidget(self.passLabel)
        layout.addWidget(self.passBox)
        layout.addWidget(self.sslLabel)
        layout.addWidget(self.sslCheck)

        self.setLayout(layout)

    def login(self):
        global SERVER_HOST
        global login
        global SSL
        global password

        login = str(self.userBox.text())
        password = md5Checksum(str(self.passBox.text()))
        SERVER_HOST = str(self.serverBox.text())  

        if self.sslCheck.isChecked():
            SSL = 1
        else:
            SSL = 0

        #self.close()


class WebInterface(QtGui.QWidget):
    def __init__(self, reactor):
        super(WebInterface, self).__init__()        
        self.logScreen = QtGui.QTextBrowser()
        self.create_client()
        self.splitter = QtGui.QSplitter()
        self.container = QtGui.QWidget()
        self.connectButton = QtGui.QPushButton()
        spacer = QtGui.QSpacerItem(20,40,QtGui.QSizePolicy.Minimum,QtGui.QSizePolicy.Expanding)
        self.commandLine = QtGui.QLineEdit()
        self.commandButton = QtGui.QPushButton()
        self.defineActions()
        self.reactor = reactor
        self.login = LoginWindow()
        self.uq = UploadQueue()
        self.experiment = None

        #FTP Menu
        toolBar = QtGui.QToolBar()
        self.ftpButton = QtGui.QToolButton()
        self.ftpButton.setText('Select Experiment')
        self.ftpButton.setPopupMode(QtGui.QToolButton.MenuButtonPopup)
        self.ftpButton.setMenu(self.defineFtp())
        self.ftpButton.clicked.connect(self.ftpSelectExperiment)
        toolBar.addWidget(self.ftpButton)

        #Layout
        layout = QtGui.QHBoxLayout(self)
        containerLayout = QtGui.QVBoxLayout(self.container)
        layout.addWidget(self.splitter)
        self.splitter.addWidget(self.logScreen)
        self.splitter.addWidget(self.container)
        containerLayout.addWidget(self.login)
        containerLayout.addWidget(self.connectButton)
        containerLayout.addItem(spacer)
        containerLayout.addWidget(toolBar)
        containerLayout.addWidget(self.commandLine)
        containerLayout.addWidget(self.commandButton)

        self.connectButton.clicked.connect(self.login.login)
        self.connectButton.clicked.connect(self.serverConnect)
        self.connectButton.setText("Login")
        self.commandButton.clicked.connect(self.on_doit)
        self.commandButton.setText("Send")
        self.setLayout(layout)
        self.container.setLayout(containerLayout)

        self.login.show()

    def defineFtp(self):
        Menu = QtGui.QMenu(self)
        Menu.addAction(self.ftpSelectExperimentAct)
        Menu.addAction(self.ftpGetExperimentsAct)
        Menu.addAction(self.ftpUploadAct)
        Menu.addAction(self.ftpDownloadAct)
        Menu.addAction(self.ftpListAct)
        Menu.addAction(self.saveLogAct)
        Menu.addAction(self.batchUploadAct)
        return Menu

    def defineActions(self):
        self.ftpUploadAct = QtGui.QAction('Upload', self, triggered=self.ftpPostSetup)
        self.ftpDownloadAct = QtGui.QAction('Download', self, triggered=self.ftpGetSetup)
        self.ftpListAct = QtGui.QAction('List', self, triggered=self.ftpListSetup)
        self.ftpSelectExperimentAct = QtGui.QAction('Select Experiment', self, 
                                                    triggered=self.ftpSelectExperimentSetup)
        self.ftpGetExperimentsAct = QtGui.QAction('Get Experiments', self, 
                                                  triggered=self.ftpGetExperimentsSetup)
        self.saveLogAct = QtGui.QAction('Save Log', self, triggered=self.saveLogSetup)
        self.batchUploadAct = QtGui.QAction('Batch Upload', self, triggered=self.batchUploadSetup)

    def saveLogSetup(self):
        self.ftpButton.setText("Save Log")
        self.ftpButton.clicked.disconnect()
        self.ftpButton.clicked.connect(self.saveLog)        

    def ftpGetSetup(self):
        self.ftpButton.setText("Download")
        self.ftpButton.clicked.disconnect()
        self.ftpButton.clicked.connect(self.ftpGet)

    def ftpPostSetup(self):
        self.ftpButton.setText("Upload")
        self.ftpButton.clicked.disconnect()
        self.ftpButton.clicked.connect(self.ftpPost)

    def ftpListSetup(self):
        self.ftpButton.setText("List")
        self.ftpButton.clicked.disconnect()
        self.ftpButton.clicked.connect(self.ftpList)

    def ftpSelectExperimentSetup(self):
        self.ftpButton.setText("Select Experiment")
        self.ftpButton.clicked.disconnect()
        self.ftpButton.clicked.connect(self.ftpSelectExperiment)

    def ftpGetExperimentsSetup(self):
        self.ftpButton.setText("Get Experiments")
        self.ftpButton.clicked.disconnect()
        self.ftpButton.clicked.connect(self.ftpGetExperiments)

    def batchUploadSetup(self):
        self.ftpButton.setText("Batch Upload")
        self.ftpButton.clicked.disconnect()
        self.ftpButton.clicked.connect(self.batchUploadWin)

#The following functions are modified versions of functions
#from PH5GUI.py
    def log(self, msg):
        self.logScreen.append(str(msg))

    def create_client(self):
        self.client = SocketClientFactory(
            self.connectSuccess,
            self.connectFail,
            self.onReceive)

    def connectSuccess(self):
        global token
        global login
        global password
        global colors
        token = getToken()

        if SSL==1:
            self.log('<font color=%s>Connecting to server via SSL connection...</font>' % colors["interface"])
            self.client.send_msg(token +' Welcome to server you are connected via SSL'+self.timestamp())
        else:
            self.log('<font color=%s>Connecting to server without SSL.</font>' % colors["interface"])
            self.client.send_msg(token +' Welcome to server you are connected via NON SSL'+self.timestamp())

        if  SERVER_HOST == 'localhost':
            self.client.send_msg(token + ' login localhost 83e3cfe08c6b519634039e0b89bcc7a2' + self.timestamp())
        else: 
            self.client.send_msg(token+' login '+login+' '+password + self.timestamp())

        self.connectButton.setText("Reconnect")

    def connectFail(self, reason):
        global colors
        # reason is a twisted.python.failure.Failure  object
        self.log('<font color=%s>Connection failed: %s</font>' % (colors["error"], reason.getErrorMessage()))

    def onReceive(self, msg):
        global ftpname
        if msg.startswith("You are now logged in as:"):
            length= int(len(login))
            ftpname= msg[26+length+1:]
            self.log('> %s' % msg[:26+int(len(login))+1])

        else:
            self.log('> %s' % msg)
            if msg in ("q", "Q", "quit", "Quit"):
                self.connection.disconnect()
                self.connectButton.setText("Connect")

    def serverConnect(self):  
        if SSL == 1:
            self.connection = self.reactor.connectSSL(SERVER_HOST, SERVER_PORT, 
                                                      self.client, ssl.ClientContextFactory())
        else:
            self.connection = self.reactor.connectTCP(SERVER_HOST, SERVER_PORT, self.client)

    def serverLocalHost(self):        
        global SERVER_HOST
        global colors

        SERVER_HOST = 'localhost'
        if SSL == 1:
            print "SSL mode ON"
            self.connection = self.reactor.connectSSL(SERVER_HOST, SERVER_PORT, 
                                                      self.client, ssl.ClientContextFactory())
        else:
            print "SSL mode OFF"
            self.connection = self.reactor.connectTCP(SERVER_HOST, SERVER_PORT, self.client)

    def on_doit(self):
        global token
        if not token:
            self.log("<font color=%s>Not logged in!</font>" % colors["error"])
            return
        my_input = str(self.commandLine.text())
        self.log("<b>You: %s </b>" % my_input)
        self.client.send_msg(token+" "+my_input+self.timestamp())
        self.commandLine.setText("")

    def ftpPost(self):
        global token
        global ftpname
        if not token:
            self.log("<font color=%s>Not logged in!</font>" % colors["error"])
            return
        if not self.experiment:
            self.log("<font color=%s>Please select an experiment.</font>" % colors["error"])
            return

        fname = QtGui.QFileDialog.getOpenFileName(self, 'Open file', 
                                                  '/home')
        if not fname:
            return

        storname =os.path.basename(str(fname))
        s = ftplib.FTP(SERVER_HOST,ftpname, 'redapple') # Connect
        s.cwd("/" + self.experiment)

        f = open(fname,'rb')                # file to send
        s.storbinary('STOR '+storname, f)         # Send the file

        f.close()                                # Close file and FTP
        s.quit
        self.log("> Uploaded file %s to experiment %s." % (fname, self.experiment))
        self.client.send_msg(token+' file '+storname+self.timestamp())

    def ftpList(self):
        global token
        global ftpname
        if not token:
            self.log("<font color=%s>Not logged in!</font>" % colors["error"])
            return
        if not self.experiment:
            self.log("<font color=%s>Please select an experiment.</font>" % colors["error"])
            return
        s = ftplib.FTP(SERVER_HOST, ftpname, 'redapple')
        try :
            s.cwd("/" + self.experiment)
        except :
            s.quit
            self.log("<font color=%s>Experiment directory not found!</font>" % colors["error"])
            return

        self.log ("> PWD: %s" % s.pwd())
        files = []
        s.dir(files.append)
        for line in files:
            self.log("> %s" % line) 
        s.quit

    def ftpSelectExperiment(self):
        global token
        global ftpname

        if not token:
            self.log("<font color=%s>Not logged in!</font>" % colors["error"])
            return

        text, ok = QtGui.QInputDialog.getText(self, "Select Experiment",
                                              "Experiment Name:")

        if ok:
            self.experiment = str(text)
        else:
            return

        command = "{0} experiment {1}{2}".format (token, self.experiment, self.timestamp ())
        print command
        self.client.send_msg(command)


    def ftpGet(self):
        global token
        global ftpname
        master = False

        if not token:
            self.log("<font color=%s>Not logged in!</font>" % colors["error"])
            return

        if not self.experiment: 
            self.log("<font color=%s>Please select an experiment.</font>" % colors["error"])
            return

        self.log("> Selecting files from experiment: %s" % self.experiment)


        s = ftplib.FTP(SERVER_HOST, ftpname, 'redapple')
        cwd = s.cwd("/"+self.experiment)
        kefs = ["Experiment_t", "Sort_t", "Offset_t", "Event_t", "Array_t", 
                "Response_t", "Report_t", "Receiver_t", "Index_t", "Das_t", "Time_t", "master.ph5"]

        text, ok = QtGui.QInputDialog.getItem(self, 'Kef Select', 'Pick a file', kefs, 0, True)

        if ok:

            if text == "Array_t":
                number, ok = QtGui.QInputDialog.getInteger(self, "Select Suffix","Table Number:", 0)
                if not ok:
                    s.quit
                    return               
                self.client.send_msg(token+' get_kef '+str(text)+' '+str(number)+self.timestamp())
                fname = str(text)+"_%03d.kef" % number
            elif text == "Das_t":
                serial, ok = QtGui.QInputDialog.getText(self, 'Serial', "Enter Serial:")
                if not ok:
                    s.quit
                    return
                self.client.send_msg(token+' get_kef '+str(text)+' '+str(text)+self.timestamp())
                fname = str(text) + "_%s.kef" % serial
            elif text == "master.ph5":
                master = True
                fname = str(text)
            else:
                self.client.send_msg(token+' get_kef '+str(text)+self.timestamp())
                fname = str(text) + ".kef"


            outfname = str(QtGui.QFileDialog.getSaveFileName(self, 'Save File', fname)) 
        else:
            s.quit
            return

        if not outfname:
            s.quit
            return

        f = open(outfname,"wb")
        self.log("> Grabbing file %s" % fname)

        if master:
            s.retrbinary("RETR " + "master.ph5",f.write)
        else:
            s.retrbinary("RETR " + "temp.kef",f.write)
        f.close()
        self.log("> %s saved from the server as %s " % (fname, outfname))

        s.quit

    def ftpGetExperiments(self):
        global token
        if not token:
            self.log("<font color=%s>Not logged in!</font>" % colors["error"])
            return

        self.client.send_msg(token+' get experiments'+self.timestamp())

    def saveLog(self):
        fname = QtGui.QFileDialog.getSaveFileName(self, 'Save file', 
                                                  '/home', ".txt")
        file = open(fname, 'w')
        data = self.logScreen.toPlainText()
        file.write(data)
        file.close()

    def keyPressEvent(self, event):
        if type(event) == QtGui.QKeyEvent:
            if event.key() == 16777220:
                self.on_doit()    
            else:
                event.ignore()

    def batchUploadWin(self):
        self.uq.button.clicked.connect(self.batchUpload) 
        self.uq.show()

    def batchUpload(self):
        global token
        global ftpname
        if not token:
            self.log("<font color=%s>Not logged in!</font>" % colors["error"])
            return
        if not self.experiment:
            self.log("<font color=%s>Please select an experiment.</font>" % colors["error"])
            return
        items = []
        for index in xrange(self.uq.view.count()):
            items.append(self.uq.view.item(index))
        names = [str(i.text()) for i in items]

        if not names:
            return

        s = ftplib.FTP (SERVER_HOST, ftpname, 'redapple')
        s.cwd(self.experiment)
        try :
            s.mkd ('RAW')
        except Exception as e :
            print e
            
        for x in labels :
            if os.path.isdir (x) :
                basedir = os.path.basename (x)
                if not trdDirRE.match (basedir) :
                    #   Need to clean up and return
                    continue

        for x in names:
            f = open(x,'rb')           
            s.storbinary('STOR '+x, f)
            self.log("> Uploaded file %s to experiment %s." % (x, self.experiment))
            f.close()
        s.quit

        self.uq.view.clear()

    def timestamp(self):
        return " %d" % time.time()

    def exit(self):
        self.log("<font color =%s>Quitting...</font>" % colors["interface"])
        self.client.send_msg(token+' exit'+self.timestamp())


class FileList(QtGui.QListWidget):
    def __init__(self, type, parent=None):
        super(FileList, self).__init__(parent)
        self.setAcceptDrops(True)

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls:
            event.accept()
        else:
            event.ignore()

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls:
            event.setDropAction(QtCore.Qt.CopyAction)
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasUrls:
            event.setDropAction(QtCore.Qt.CopyAction)
            event.accept()
            links = []
            for url in event.mimeData().urls():
                links.append(str(url.toLocalFile()))
            self.emit(QtCore.SIGNAL("dropped"), links)
        else:
            event.ignore()

class UploadQueue(QtGui.QWidget):
    def __init__(self, parent=None):
        super(UploadQueue, self).__init__(parent)

        self.view = FileList(self)
        self.connect(self.view, QtCore.SIGNAL("dropped"), self.pictureDropped)
        self.button = QtGui.QPushButton("Upload")

        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.view)
        layout.addWidget(self.button)

    def pictureDropped(self, l):
        for url in l:
            if os.path.exists(url):             
                item = QtGui.QListWidgetItem(url, self.view) 
                item.setStatusTip(url)

    def keyPressEvent(self, event):
        if type(event) == QtGui.QKeyEvent:
            if event.key() == QtCore.Qt.Key_Delete:
                self.delete()    
            else:
                event.ignore()

    def delete(self):
        for SelectedItem in self.view.selectedItems():
            self.view.takeItem(self.view.row(SelectedItem))

#Returns the index of a string found in a list
def getIndex(string, lists):
    for i in range(len(lists)):
        if (string == lists[i]): return i
    return i

def getToken():
    s1 = time.time() #get current unix time
    s1 = hashlib.md5(str(s1)).hexdigest() #hash it
    s2 = s1 + str(randint(1000000000, 9999999999)) #add salt
    s2 = hashlib.md5(s2).hexdigest() #rehash
    return s2 #this attempts to get 100% unique hashes everytime


#This function is courtesy of PH5GUI.py by 
#Maxwell Hill and Derick Hess
def md5Checksum(s):
    m = hashlib.md5()
    m.update(s)
    return m.hexdigest()

def main():
    app = QtGui.QApplication(sys.argv)

    qt4reactor.install()
    from twisted.internet import reactor

    win = MainWindow(reactor)
    reactor.run()

###   Mixins   ###
def createtmplst (files, sd = None) :
    if sd == None :
        sd = time.strftime ("%Y%m%d", time.localtime (time.time ())) + '.000'

    tmpfile = os.path.join ('/tmp', 'lst_' + sd)
    fh = open (tmpfile, 'w+')
    for f in files :
        line = os.path.join ("RAW", sd, f)
        fh .write (line + '\n')

    fh.close ()
    return tmpfile

def getModules():
    dotfile = os.path.join(os.path.expanduser('~'), '.kefscripts')
    if os.path.exists(dotfile):
        scripts = os.listdir(dotfile)
    else:
        os.makedirs(dotfile)
        init = open(dotfile+'/__init__.py', 'w')
        init.write('')
        init.close()
        scripts = []
    return scripts




if __name__ == "__main__":
    main()
