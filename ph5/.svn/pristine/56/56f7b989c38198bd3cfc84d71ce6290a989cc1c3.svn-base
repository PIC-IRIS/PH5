#! /usr/local/bin/python

from PyQt4 import QtGui, QtCore
import Requestor
import time
import os
from MapWindow import MapWindow

class WebInterface(QtGui.QWidget):
    def __init__(self):
        super(WebInterface, self).__init__()        
        self.logScreen = QtGui.QTextBrowser()
        self.splitter = QtGui.QSplitter()
        self.container = InputContainer()
        self.button = QtGui.QPushButton()
        self.button.setText("Get")
        self.button.clicked.connect(self.get)   
        self.button2 = QtGui.QPushButton()
        self.button2.setText("Post")
        self.button2.clicked.connect(self.post)   
        self.button3 = QtGui.QPushButton()
        self.button3.setText("Save Log")
        self.button3.clicked.connect(self.save_log)
        self.button4 = QtGui.QPushButton()
        self.button4.setText("View Map")
        self.button4.clicked.connect(self.map)
        
        self.nwLabel = QtGui.QLabel("NW Coordinates (Lat/Lon)")
        self.nwlat = QtGui.QLineEdit()
        self.nwlon = QtGui.QLineEdit()
        self.seLabel = QtGui.QLabel("SE Coordinates (Lat/Lon)")
        self.selat = QtGui.QLineEdit()
        self.selon = QtGui.QLineEdit()

          
        self.requestor = Requestor.Requestor()
        
        #Layout
        layout = QtGui.QVBoxLayout(self)
        
        layout.addWidget(self.splitter)
        self.container.addWidget(self.button)
        self.container.addWidget(self.button2)
        self.container.addWidget(self.button3)
        self.container.addWidget(self.button4)
        layout.addWidget(self.nwLabel)
        layout.addWidget(self.nwlat)
        layout.addWidget(self.nwlon)
        layout.addWidget(self.seLabel)
        layout.addWidget(self.selat)
        layout.addWidget(self.selon)
        self.splitter.addWidget(self.logScreen)
        self.splitter.addWidget(self.container)


        self.setLayout(layout)
 
    def log(self, msg):
        timestamp = "[{0}]".format(time.strftime("%Y-%m-%d %H:%M"))
        self.logScreen.append("{0} {1}".format(timestamp, str(msg)))
        
    def parseSelection(self, selection):
        if selection == "Array_t":
            number, ok = QtGui.QInputDialog.getInteger(self, 
                                                       "Select Suffix","Table Number:", 0)
            if not ok: return dict()
            msg, output = self.requestor.request_array(self.container.experiment(), 
                                                       "{0:3d}".format(number))
        elif selection == "Das_t":
            serial, ok = QtGui.QInputDialog.getText(self, 
                                                    'Serial', "Enter Serial:")
            if not ok: return dict()
            msg, output = self.requestor.request_das(self.container.experiment(), 
                                                     "{0:s}".format(serial))
        else:
            msg, output = self.requestor.request_kef(self.container.experiment(), text)

        return {"message":msg, "output":output}

    def generateFileExtention(self, selection):
        if selection == "master":
            return ".ph5"

        else:
            return ".kef"

    def get(self):
        kefs = ["Experiment_t", "Sort_t"    , 
                "Offset_t"    , "Event_t"   , 
                "Array_t"     , "Response_t", 
                "Report_t"    , "Receiver_t", 
                "Index_t"     , "Das_t"     , 
                "Time_t"      , "master"]
        self.requestor.url = self.container.url()
        selection, successful = QtGui.QInputDialog.getItem(self, 'Kef Select',
                                                           'Pick a file', kefs, 0, True)
        if not successful:
            return

        selection = str(selection)
        parse_result = self.parseSelection(selection)
        if not parse_result:
            return

        self.log("Selected file {0} for download.".format(selection))
        self.log(parse_result["message"])
        
        outfilename = str(QtGui.QFileDialog.getSaveFileName(self, 'Save File', 
                                                            selection + self.generateFileExtention(selection)))
        if not outfilename:
            self.log("Invalid filename. File write failed.")
            return

        with open(outfilename, 'w') as outfile:
            outfile.write(parse_result["output"])
        
        self.log("File {0} written successfully.".format(outfilename))


    def post(self):
        self.requestor.url = self.container.url()
        filename = str(QtGui.QFileDialog.getOpenFileName())
        
        if not filename:
            return

        with open(filename, "r") as sendfile:
            kefs = ["Experiment_t", "Sort_t"    , 
                    "Offset_t"    , "Event_t"   , 
                    "Array_t"     , "Response_t", 
                    "Report_t"    , "Receiver_t", 
                    "Index_t"     , "Das_t"     , 
                    "Time_t"      , "master"]

            kef_type, ok = QtGui.QInputDialog.getItem(self, 'Kef Select', 'Pick a file', kefs, 0, True)
            kef_type = str(kef_type)
            data = sendfile.read()
            self.log(self.requestor.send_file(self.container.experiment(), kef_type, data))

    def map(self):
        self.requestor.url = self.container.url()
        outfile = ""

        if (self.coordinateFieldsArePopulated()):
            outfile = self.requestor.request_map(self.container.experiment(),
                                                 self.nwlat.text(),
                                                 self.nwlon.text(),
                                                 self.selat.text(),
                                                 self.selon.text())

        else:
            outfile = self.requestor.request_naked_map(self.container.experiment())

        with open("temp.png", "w") as out:
            out.write(outfile[1])
            
        MapWindow().show()
        self.log("Map saved as temp.png in {0}".format(os.getcwd()))

    def coordinateFieldsArePopulated(self):
        north = self.nwlat.text() and self.nwlon.text()
        south = self.selat.text() and self.selon.text()
        return  north and south 

    def save_log(self):
        fname = QtGui.QFileDialog.getSaveFileName(self, 'Save file', 
                                                          '/home', ".txt")
        if not fname:
            return

        with open(fname, 'w') as outfile:
            data = self.logScreen.toPlainText()
            outfile.write(data)
     
    def exit(self):
        self.log("Quitting")

class InputContainer(QtGui.QWidget):
    def __init__(self):
        super(InputContainer, self).__init__()
        self.layout = QtGui.QVBoxLayout(self)
        spacer = QtGui.QSpacerItem(20,40,QtGui.QSizePolicy.Minimum,QtGui.QSizePolicy.Expanding)
        self.url_label = QtGui.QLabel("URL:")
        self.url_field = QtGui.QLineEdit("http://jasper.passcal.nmt.edu/cgi-bin/kef/1/query")
        self.experiment_label = QtGui.QLabel("Experiment Name:")
        self.experiment_field = QtGui.QLineEdit("Red_River")

        self.layout.addWidget(self.url_label)
        self.layout.addWidget(self.url_field)
        self.layout.addWidget(self.experiment_label)
        self.layout.addWidget(self.experiment_field)
        self.layout.addItem(spacer)
        self.setLayout(self.layout)

    def url(self):
        return str(self.url_field.text())

    def experiment(self):
        return str(self.experiment_field.text())

    def addWidget(self, widget):
        self.layout.addWidget(widget)
        self.setLayout(self.layout)


class ActionHub:
    def __init__(self):
        pass
