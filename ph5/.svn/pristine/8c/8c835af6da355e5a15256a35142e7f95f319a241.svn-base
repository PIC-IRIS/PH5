#!/usr/local/bin/python

import re
from PyQt4 import QtGui, QtCore

import utility.KefUtility as KefUtility
import HelpWindow

class Editor(QtGui.QWidget):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        mainLayout = QtGui.QVBoxLayout(self)
        self.table_display = QtGui.QTableWidget(self)
        self.edit = QtGui.QLineEdit(self)
        self.button = QtGui.QPushButton("Go", self)
        self.button.clicked.connect(self.replace)
        self.defineActions()
        self.filename = ""
        self.utility = KefUtility.KefUtility()
        self.table = self.utility.new_table()
        self.helpWin = HelpWindow.HelpWindow()
        
        #Define the toolbar
        toolBar = QtGui.QToolBar()
        fileButton = QtGui.QToolButton()
        fileButton.setText('File')
        fileButton.setPopupMode(QtGui.QToolButton.MenuButtonPopup)
        fileButton.setMenu(self.defineFileMenu())
        editButton = QtGui.QToolButton()
        editButton.setText('Edit')
        editButton.setPopupMode(QtGui.QToolButton.MenuButtonPopup)
        editButton.setMenu(self.defineEditMenu())
        helpButton = QtGui.QToolButton()
        helpButton.setText('Help')
        helpButton.setPopupMode(QtGui.QToolButton.MenuButtonPopup)
        helpButton.setMenu(self.defineHelpMenu())
        toolBar.addWidget(fileButton)
        toolBar.addWidget(editButton)
        toolBar.addWidget(helpButton)

        #Add widgets to layout
        mainLayout.addWidget(toolBar)
        mainLayout.addWidget(self.table_display)
        mainLayout.addWidget(self.edit)
        mainLayout.addWidget(self.button)
        mainLayout.addWidget(QtGui.QGroupBox())
                
        self.setLayout(mainLayout)
        self.show()

    def defineFileMenu(self):
        fMenu = QtGui.QMenu(self)
        fMenu.addAction(self.fileOpenAct)
        fMenu.addAction(self.fileSaveAct)
        fMenu.addAction(self.fileCloseAct)
        fMenu.addAction(self.fileExitAct)
        return fMenu

    def defineEditMenu(self):
        eMenu = QtGui.QMenu(self)
        eMenu.addAction(self.editUpdateAct)
        eMenu.addAction(self.editDeleteAct)
        eMenu.addAction(self.editKeyAct)
        eMenu.addAction(self.editClearAct)
        eMenu.addAction(self.editScriptAct)
        return eMenu

    def defineHelpMenu(self):
        hMenu = QtGui.QMenu(self)
        hMenu.addAction(self.helpHelpAct)
        hMenu.addAction(self.helpAboutAct)
        return hMenu
        
    #These are just the function calls tied to the various menu buttons
    def defineActions(self):
        self.fileOpenAct = QtGui.QAction('Open', self, triggered=self.openKefFile)
        self.fileOpenAct.setShortcut('Ctrl+O')
        self.fileSaveAct = QtGui.QAction('Save As...', self, triggered=self.saveFile)
        self.fileSaveAct.setShortcut('Ctrl+S')
        self.fileCloseAct = QtGui.QAction('Close', self, triggered=self.closeFile)
        self.fileExitAct = QtGui.QAction('Exit', self, triggered=self.exitFile)

        self.editUpdateAct = QtGui.QAction('Mark cell(s) for update', self, triggered=self.updateEdit)
        self.editUpdateAct.setShortcut('Ctrl+U')
        self.editDeleteAct = QtGui.QAction('Mark cell(s) for deletion', self, triggered=self.deleteEdit)
        self.editDeleteAct.setShortcut('Ctrl+D')
        self.editKeyAct = QtGui.QAction('Select Key', self, triggered=self.keyEdit)
        self.editKeyAct.setShortcut('Ctrl+K')
        self.editClearAct = QtGui.QAction('Clear cell(s)', self, triggered=self.clearEdit)
        self.editScriptAct =  QtGui.QAction('Run custom script', self, triggered=self.scriptEdit) 

        self.helpHelpAct = QtGui.QAction('KefEdit Help', self, triggered=self.helpHelp)
        self.helpHelpAct.setShortcut('F1')
        self.helpAboutAct = QtGui.QAction('About', self, triggered=self.aboutHelp)

    def openFile(self):
        filename = str(QtGui.QFileDialog.getOpenFileName())
        return filename

    def openKefFile(self):                                  
        self.filename = self.openFile()
        
        if not self.filename:
            return

        try:
            self.table = self.utility.parser.parse(self.filename)
        except KefUtility.KefParser.KefSyntaxError as error:
            QtGui.QMessageBox.warning(self, "Error", "Syntax error on line {0}".format(error.line_number))
        except KefUtility.KefParser.KefFileTypeError as error:
            QtGui.QMessageBox.warning(self, "Error", "File {0} is not a kef file!".format(error.filename))
        
        if not self.table:
            QtGui.QMessageBox.warning(self, "Error", "Parse failed.")
            return

        self.setData()

    def saveFile(self):
        outFilename = str(QtGui.QFileDialog.getSaveFileName())
        if not outFilename: return
        container = self.utility.builder.build_container()
        self.utility.writer.write_kef(outFilename, container)

    #Clear all rows and remove header labels
    def closeFile(self):
        for i in range(self.table.rows):
            self.table_display.removeRow(0)         
            self.table_display.horizontalHeader().setVisible(False)
            self.table = self.utility.new_table()
            self.utility.builder.empty()
    
    def exitFile(self):
        self.closeEvent("Exit")
 
    def updateEdit(self):
        items = self.table_display.selectedItems()
        for item in items:
            brush = QtGui.QBrush(QtGui.QColor(34, 139, 34))
            brush.setStyle(QtCore.Qt.SolidPattern)
            item.setBackground(brush)
            self.utility.builder.update(self.table, item.row())

    def deleteEdit(self):
        items = self.table_display.selectedItems()
        for item in items:
            brush = QtGui.QBrush(QtGui.QColor(178, 34, 34))
            brush.setStyle(QtCore.Qt.SolidPattern)
            item.setBackground(brush)
            self.utility.builder.delete(self.table, item.row())

    def keyEdit(self):
        keys = self.table_display.selectedItems()
        for key in keys:
            try:
                self.utility.builder.add_key(self.table, key.row())
                brush = QtGui.QBrush(QtGui.QColor(255, 140, 0))
                brush.setStyle(QtCore.Qt.SolidPattern)
                key.setBackground(brush)
            except KeyError:
                QtGui.QMessageBox.warning(self, "Error", self.tr("Cannot select key for unmarked row!"))
                return
    
    def clearEdit(self):
        items = self.table_display.selectedItems()
        for item in items:
            self.utility.builder.remove(item.row())
            brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
            brush.setStyle(QtCore.Qt.SolidPattern)
            item.setBackground(brush)

#######################NOW WORKING HERE##############################
    def scriptEdit(self):
        scriptname = self.openFile()

        if not scriptname:
            return

        result = self.utility.run_kefscript(scriptname, self.table.values)

        if not result:
            return

        self.table.update(result)
        self.setData()

    def helpHelp(self):
        self.helpWin.show()

    def aboutHelp(self):
        QtGui.QMessageBox.about(self, self.tr("About KefEdit"),
            self.tr("<b>KefEdit</b> Is a tool that can be used modify .kef files and mark "
                    "them for updating. The data entry box supports regular expressions. "
                    "Type <i>\'help\'</i> for usage information."
                    "<br><br>(c)2012 IRIS/PASSCAL"))

    #Sets the table and header labels and makes them visible
    def setData(self):
        self.table_display.clear()
        self.setHeaders()
        for j in range(self.table.rows):
            for i, label in enumerate(self.table.labels):
                self.table_display.setItem(j, i, QtGui.QTableWidgetItem(self.table.values.get(label)[j]))

    #This function handles the regular expressions that the user may pass
    def replace(self):
        command = str(self.edit.text())
        PATTERN = re.compile(r'''((?:[^ "']|"[^"]*"|'[^']*')+)''')
        command = PATTERN.split(command)[1::2]

        if len(command) < 3:
            QtGui.QMessageBox.warning(self, "Error", "usage: column_name \"REGEX\" replacement")
            return
        elif not command[0] in self.table.labels:
            QtGui.QMessageBox.warning(self, "Error", "\"%s\" not found in table!" % command[0])
            return
        else:
            command[1] = command[1].strip("\"") 
            index = self.table.labels.index(command[0])
            for i in range(self.table.rows):
                if re.match(r"%s" % command[1], self.table_display.item(i, index).text()):
                    self.table_display.setItem(i,index,QtGui.QTableWidgetItem(command[2]))
                    brush = QtGui.QBrush(QtGui.QColor(169, 169, 169))
                    brush.setStyle(QtCore.Qt.SolidPattern)
                    self.table_display.item(i,index).setBackground(brush)

    def setHeaders(self):
        self.table_display.setColumnCount(self.table.columns)
        self.table_display.setHorizontalHeaderLabels(self.table.labels)
        self.table_display.setRowCount(self.table.rows)
        self.table_display.horizontalHeader().setVisible(True)

    def closeEvent(self, e):
        if e == "Exit":
            message = QtGui.QMessageBox.question(self,'Quit', "Are you sure?\nAll unsaved data will be lost."
                                                 ,QtGui.QMessageBox.Yes, QtGui.QMessageBox.No)
            if message == QtGui.QMessageBox.Yes:
                pass
            else:
                return False
        else:
            message = QtGui.QMessageBox.question(self,'Quit', "Save changes before closing?"
                                                 , QtGui.QMessageBox.Yes, QtGui.QMessageBox.No)
            if message == QtGui.QMessageBox.Yes:
                self.saveFile()
            else:
                pass
            
        QtGui.QApplication.quit()

    def warning(self, line):
        QtGui.QMessageBox.warning(self, "Warning", 
                                  self.tr("File: %s<br><br>Line %d contains update/delete information;"
                                          " This can cause errors." % (self.filename, line)))
        return True
