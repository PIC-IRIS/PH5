#!/usr/bin/env pnpython3

#
#   Read the SOH_a_[n] files under Receivers_g/Das_g_[n] and produce a kef file to populate Time_t
#
#   July 2007
#

import sys, os, os.path, time, re, string
import numpy as npy
#   This provides the base functionality
import Experiment, TimeDOY

#   Make sure we are all on the same time zone ;^)
os.environ['TZ'] = 'UTM'
time.tzset ()

PROG_VERSION = '2014.282 Developmental'

#   Match lines related to timing in SOH
timetoRE = re.compile ("\d+:.*--\s+TIME\s+CHANGED\s+TO\s+(\d{4}:\d{3}:\d{2}:\d{2}:\d{2}:\d{3})\s+AND\s+(\d{4}/\d{4})\s+MS")
timefromRE = re.compile ("\d+:.*--\s+TIME\s+CHANGED\s+FROM\s+(\d{4}:\d{3}:\d{2}:\d{2}:\d{2}:\d{3})\s+AND\s+(\d{4}/\d{4})\s+MS")

#
#   These are to hold different parts of the meta-data
#
#   /Experiment_g/Experiment_t
#EXPERIMENT_T = None
#   /Experiment_g/Sorts_g/Event_t
#EVENT_T = None
#   /Experiment_g/Sorts_g/Offset_t
#OFFSET_T = None
#   /Experiment_g/Sorts_g/Sort_t
#SORT_T = None
#   /Experiment_g/Responses_g/Response_t
#RESPONSE_T = None
#   /Experiment_g/Sorts_g/Array_t_[nnn]
#ARRAY_T = {}
#   /Experiment_g/Receivers_g/Das_g_[sn]/Das_t (keyed on DAS)
#DAS_T = {}
#   /Experiment_g/Receivers_g/Das_g_[sn]/Receiver_t (keyed on DAS)
#RECEIVER_T = {}
#   /Experiment_g/Receivers_g/Das_g_[sn]/SOH_a_[n] (keyed on DAS then by SOH_a_[n] name) 
#SOH_A = {}
#   A list of das_groups that refers to Das_g_[sn]'s
#DASS = []

#
#   To hold table rows and keys
#
class rows_keys (object) :
    __slots__ = ('rows', 'keys')
    def __init__ (self, rows = None, keys = None) :
        self.rows = rows
        self.keys = keys
        
    def set (self, rows = None, keys = None) :
        if rows != None : self.rows = rows
        if keys != None : self.keys = keys

#
#   To hold DAS sn and references to Das_g_[sn]
#
class das_groups (object) :
    __slots__ = ('das', 'node')
    def __init__ (self, das = None, node = None) :
        self.das = das
        self.node = node

#
#   Read Command line arguments
#
def get_args () :
    global PH5, PATH, DEBUG
    
    from optparse import OptionParser
    
    oparser = OptionParser ()
    
    oparser.usage = "Version: {0}, time-kef-gen --nickname ph5-file-prefix [-p path]".format (PROG_VERSION)
    
    oparser.description = "Generates a kef file to populate Time_t from SOH_A_."
    
    oparser.add_option ("-n", "--nickname", dest = "ph5_file_prefix",
                        help = "The ph5 file prefix (experiment nickname).",
                        metavar = "ph5_file_prefix")
    
    oparser.add_option ("-p", "--path", dest = "ph5_path",
                        help = "Path to ph5 files. Defaults to current directory.",
                        metavar = "ph5_path")
    
    oparser.add_option ("-d", dest = "debug", action = "store_true", default = False)
    
    options, args = oparser.parse_args ()
    
    if options.ph5_file_prefix != None :
        PH5 = options.ph5_file_prefix
    else :
        PH5 = None
        
    if options.ph5_path != None :
        PATH = options.ph5_path
    else :
        PATH = "."
        
    if options.debug != None :
        DEBUG = options.debug
        
    if PH5 == None :
        sys.stderr.write ("Error: Missing required option. Try --help\n")
        sys.exit (-1)
        
    #ph5_path = os.path.join (PATH, PH5) + '.ph5'
    #if not os.path.exists (ph5_path) :
        #sys.stderr.write ("Error: %s does not exist.\n" % ph5_path)
        #sys.exit (-2)

#
#   Initialize ph5 file
#
def initialize_ph5 (editmode = False) :
    '''   Initialize the ph5 file   '''
    global EX, PATH, PH5
    
    EX = Experiment.ExperimentGroup (PATH, PH5)
    EX.ph5open (editmode)
    EX.initgroup ()

#
#   Print rows_keys
#
def debug_print (a) :
    i = 1
    #   Loop through table rows
    for r in a.rows :
        #   Print line number
        print "%d) " % i,
        i += 1
        #   Loop through each row column and print
        for k in a.keys :
            print k, "=>", r[k], ",",
        print
        
#def read_experiment_table () :
    #'''   Read /Experiment_g/Experiment_t   '''
    #global EX, EXPERIMENT_T
    
    #exp, exp_keys = EX.read_experiment ()
    
    #rowskeys = rows_keys (exp, exp_keys)
    
    #EXPERIMENT_T = rowskeys
    
#def read_event_table () :
    #'''   Read /Experiment_g/Sorts_g/Event_t   '''
    #global EX, EVENT_T
    
    #events, event_keys = EX.ph5_g_sorts.read_events ()
    
    #rowskeys = rows_keys (events, event_keys)
    
    #EVENT_T = rowskeys
    
#def read_offset_table () :
    #'''   Read /Experinent_t/Sorts_g/Offset_t   '''
    #global EX, OFFSET_T
    
    #offsets, offset_keys = EX.ph5_g_sorts.read_offsets ()
    
    #rowskeys = rows_keys (offsets, offset_keys)
    
    #OFFSET_T = rowskeys
    
#def read_sort_table () :
    #'''   Read /Experiment_t/Sorts_g/Sort_g   '''
    #global EX, SORT_T
    
    #sorts, sorts_keys = EX.ph5_g_sorts.read_sorts ()
    
    #rowskeys = rows_keys (sorts, sorts_keys)
    
    #SORT_T = rowskeys
    
#def read_sort_arrays () :
    #'''   Read /Experiment_t/Sorts_g/Array_t_[n]   '''
    #global EX, ARRAY_T
    
    ##   We get a list of Array_t_[n] names here...
    ##   (these are also in Sort_t)
    #names = EX.ph5_g_sorts.names ()
    #for n in names :
        #arrays, array_keys = EX.ph5_g_sorts.read_arrays (n)
        
        #rowskeys = rows_keys (arrays, array_keys)
        ##   We key this on the name since there can be multiple arrays
        #ARRAY_T[n] = rowskeys
    
#def read_response_table () :
    #'''   Read /Experiment_g/Respones_g/Response_t   '''
    #global EX, RESPONSE_T
    
    #response, response_keys = EX.ph5_g_responses.read_responses ()
    
    #rowskeys = rows_keys (response, response_keys)
    
    #RESPONSE_T = rowskeys
    
def read_receivers_soh () :
    '''   Read SOH tables in Das_g_[sn]   '''
    #global EX, DAS_T, RECEIVER_T
    
    #   Get references for all das groups keyed on das
    dasGroups = EX.ph5_g_receivers.alldas_g ()
    dass = dasGroups.keys ()
    #   Sort by das sn
    dass.sort ()
    for d in dass :
        #   Get node reference
        g = dasGroups[d]
        #dg = das_groups (d, g)
        ##   Save a master list for later
        #DASS.append (dg)
        
        #   Set the current das group
        EX.ph5_g_receivers.setcurrent (g)
        
        #   Read SOH file(s) for this das
        soh = EX.ph5_g_receivers.read_soh ()
        print_it (soh, d)
        #EX.ph5_close ()
        #initialize_ph5 ()
        
def ms (m) :
    #   Calculate milliseconds
    a, b = map (float, string.split (m, '/'))
    return a / b / 1000.0
    
def str2epoch (s) :
    '''   Convert colon separated string to epoch   '''
    yr, jd, hr, mn, sc, ms = map (int, string.split (s, ":"))
    #tm = TimeDoy.TimeDoy ()
    #sec = float (sc) + float (ms) / 1000.0
    tm = TimeDOY.TimeDOY (year=yr, 
                          month=None, 
                          day=None, 
                          hour=hr, 
                          minute=mn, 
                          second=0, 
                          microsecond=int (ms * 1000.), 
                          doy=jd, 
                          epoch=None, 
                          dtobject=None)
    e = tm.epoch (fepoch=True)
    
    return e

def process_SOH (soh_t, si = None) :
    #   To's
    tos = []
    #   From's
    fos = []
    #   Number of tos
    nto = 0
    #   Number of fos
    nfrom = 0
    #   For each line in the SOH
    for l in soh_t :
        #print l
        #   Is this a Time Changed To line?
        to = timetoRE.match (l)
        if to :
            t, m = to.groups ()
            #   Get the ms portion
            mto = ms (m)
            #   Get the epoch
            eto = str2epoch (t)
            tos.append ([eto, mto])
            nto += 1
        
        #   Is this a Time Changed From Line
        fo = timefromRE.match (l)
        if fo :
            t, m = fo.groups ()
            #   Get the ms portion
            mfrom = ms (m)
            #   Get the epoch
            efrom = str2epoch (t)
            fos.append ([efrom, mfrom])
            nfrom += 1
    
    #   If there is not a second to or a from we can't correct the time
    if nto < 2 or nfrom < 1 :
        return None
    
    #   The time of the first to
    start = tos[0][0] + tos[0][1]
    
    #   rt-125 time
    tbc = fos[0][0] + fos[0][1]
    #   GPS time
    tac = tos[1][0] + tos[1][1]
    #   If clock is fast slope is positive
    if tbc > tac :
        offset = tbc - tac
    else :
        offset = (tac - tbc) * -1
    
    #   Calculate slope in seconds per second
    tt = tac - start 
    try :
        slope = offset / tt
    except :
        return None
    
    #   start seconds, start mili-seconds, end seconds, end mili-seconds, slope, offset
    return tos[0][0], tos[0][1] * 1000000, tos[1][0], tos[1][1] * 1000000, slope, offset

def print_it (soh, das) :
    global WHACKED, W
    
    ttable = "/Experiment_g/Receivers_g/Time_t"
    #for k in SOH_A.keys () :
        #ttable = "/Experiment_g/Receivers_g/Time_t"
        
        #v = SOH_A[k]
        #print v, SOH_A
    for n in soh.keys () :
        flds = process_SOH (soh[n])
        if flds == None : 
            sys.stderr.write ("###   Warning: No time correction info for %s   ###\n" % das)
            continue
        
        print ttable
        print "\tdas/serial_number_s = %s" % das
        print "\tstart_time/epoch_l = %d" % flds[0]
        print "\tstart_time/micro_seconds_i = %d" % flds[1]
        print "\tstart_time/ascii_s = %s" % time.ctime (flds[0])
        print "\tstart_time/type_s = BOTH"
        print "\tend_time/epoch_l = %d" % flds[2]
        print "\tend_time/micro_seconds_i = %d" % flds[3]
        print "\tend_time/ascii_s = %s" % time.ctime (flds[2])
        print "\tend_time/type_s = BOTH"
        print "\tslope_d = %g" % flds[4]
        print "\toffset_d = %g" % flds[5]
        WHACKED[das] = float (flds[4])
        W.append (WHACKED[das])

        
if __name__ == "__main__" :
    global EX, WHACKED, W
    #   Clocks with excessive drift
    WHACKED = {}; W = []
    #   Get program arguments
    get_args ()
    #   Initialize ph5 file
    initialize_ph5 ()
    
    #   Read soh table(s) in Das_g_[sn]
    print "#   %s   time-kef-gen version: %s   ph5 version: %s" % (time.ctime (time.time ()), PROG_VERSION, EX.version ())
    read_receivers_soh ()
    #print_it ()        
    #   Close ph5 file
    EX.ph5close ()
    
    ave = npy.average (W); std = npy.std (W)
    dass = WHACKED.keys ()
    dass.sort ()
    top = ave + std; bot = ave - std
    for d in dass :
        if (WHACKED[d] > top or WHACKED[d] < bot) and WHACKED[d] >= 0.01 :
            sys.stderr.write ("###   Warning: DAS {0} exceeded clock drift rate of {1:g} seconds per second!   ###\n".format (d, (ave + std)))
