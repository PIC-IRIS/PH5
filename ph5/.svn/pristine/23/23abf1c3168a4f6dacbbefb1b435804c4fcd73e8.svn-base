"""
	GUI design by Maxwell Hill 
        code: Derick Hess and Maxwell Hill
	Update notes *** added help window using the design of derick's login class. Help is implemented.***


"""
from time import sleep

import csv
import os, sys, time
import Queue
from PyQt4 import QtGui, QtCore
from PyQt4.QtGui import * 
from PyQt4.QtCore import *
from twistedclient import SocketClientFactory
import ftplib
import hashlib
from twisted.internet import ssl
from configobj import ConfigObj
from random import randint


PROG_VERSION = '2012.294.a'

SERVER_HOST = None
SERVER_PORT = None
SSL = None

my_input=''
login ='localhost'
password ='83e3cfe08c6b519634039e0b89bcc7a2'
ftpname =''
commands =[]

from random import randint

def read_config (config_file) :
        global SERVER_HOST, SERVER_PORT, SSL

        config= ConfigObj(config_file)

        if not config:
                SERVER_HOST = 'localhost'
                SERVER_PORT = 50007
                SSL = 0
        else:
                print "using config file!"
                SERVER_HOST = config['SERVER_HOST']
                SERVER_PORT = int(config['SERVER_PORT'])
                SSL = int(config['SSL'])


#randomly generate 10 digit number then  md5 hash it to create a token to indentify the client to the server
def generate_token():
        number= randint(1000000000, 9999999999)  
        m = hashlib.md5()
        m.update(str(number))
        token=m.hexdigest()  
        return (token)

token=""

# Function to create md5 checksum
def md5Checksum(theString):
        m = hashlib.md5()
        m.update(theString)
        return m.hexdigest()


class PyGui(QtGui.QMainWindow):

        def __init__(self, reactor):
                super(PyGui, self).__init__()

                self.reactor = reactor
                self.create_client()

                self.initUI()
        def initUI(self):


                self.lw = LoginWindow() ##initialize the login window
                self.hw = HelpWindow()
                self.aw = AboutWindow()	

                self.centralwidget = QtGui.QWidget(self)
                self.centralwidget.setObjectName("centralwidget")
                self.gridLayout = QtGui.QGridLayout(self.centralwidget)
                self.gridLayout.setObjectName("gridLayout")
                self.textBrowser = QtGui.QTextBrowser(self.centralwidget)
                self.textBrowser.setObjectName("textBrowser")
                self.gridLayout.addWidget(self.textBrowser, 0, 0, 1, 2)
                self.lineEdit = QtGui.QLineEdit(self.centralwidget)
                self.lineEdit.setObjectName("lineEdit")
                self.gridLayout.addWidget(self.lineEdit, 1, 0, 1, 1)
                self.pushButton = QtGui.QPushButton(self.centralwidget)
                self.pushButton.setObjectName("pushButton")
                self.gridLayout.addWidget(self.pushButton, 1, 1, 1, 1)
                self.pushButton.clicked.connect(self.on_doit)
                self.pushButton_2 = QtGui.QPushButton(self.centralwidget)
                self.pushButton_2.setObjectName("pushButton_2")
                self.gridLayout.addWidget(self.pushButton_2, 1, 2, 1, 1)
                self.pushButton_2.clicked.connect(self.showDialog)
                self.setCentralWidget(self.centralwidget)
                self.menubar = QtGui.QMenuBar(self)
                self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 25))
                self.menubar.setObjectName("menubar")
                self.menuFile = QtGui.QMenu(self.menubar)
                self.menuFile.setObjectName("menuFile")
                self.menuConnect = QtGui.QMenu(self.menubar)
                self.menuConnect.setObjectName("menuConnect")
                self.menuHelp = QtGui.QMenu(self.menubar)
                self.menuHelp.setObjectName("menuHelp")
                self.menuAbout = QtGui.QMenu(self.menubar)
                self.menuAbout.setObjectName("menuAbout")



                self.setMenuBar(self.menubar)
                self.statusbar = QtGui.QStatusBar(self)
                self.statusbar.setObjectName("statusbar")
                self.setStatusBar(self.statusbar)
                self.actionLocal_Host = QtGui.QAction(self)        
                self.actionLocal_Host.setObjectName("actionLocal_Host")
                self.actionLocal_Host.setStatusTip('Connect to local machine')
                self.actionServer = QtGui.QAction(self)
                self.actionServer.setObjectName("actionServer")
                self.actionServer.setStatusTip('Connect to a remote server')
                self.menuConnect.addAction(self.actionLocal_Host)
                self.menuConnect.addAction(self.actionServer)


                self.actionHelp = QtGui.QAction(self)
                self.actionHelp.setObjectName("actionHelp")
                self.menuHelp.addAction(self.actionHelp)
                self.actionHelp.setShortcut('Ctrl+H')
                self.actionHelp.setStatusTip('Get Some Help')

                self.actionSave = QtGui.QAction( self)
                self.actionSave.setObjectName("actionSave")
                self.menuFile.addAction(self.actionSave)
                self.actionSave.setShortcut('Ctrl+S')
                self.actionSave.setStatusTip('Save Session')

                self.actionExit = QtGui.QAction(QtGui.QIcon('exit.png'), '&Exit', self)
                self.actionExit.setObjectName("actionExit")
                self.menuFile.addAction(self.actionExit)
                self.actionExit.setShortcut('Ctrl+Q')
                self.actionExit.setStatusTip('Exit application')

                self.actionAbout = QtGui.QAction(self)
                self.actionAbout.setObjectName("actionAbout")
                self.menuAbout.addAction(self.actionAbout)
                self.actionAbout.setStatusTip('About this program')


                self.menubar.addAction(self.menuFile.menuAction())
                self.menubar.addAction(self.menuConnect.menuAction())
                self.menubar.addAction(self.menuHelp.menuAction())
                self.menubar.addAction(self.menuAbout.menuAction())

                #this is how you link your tools on the tool bar
                self.actionLocal_Host.triggered.connect(self.serverLocalHost)
                self.actionServer.triggered.connect(self.lw.show) #### If the Server menu is selected show the login window
                self.actionExit.triggered.connect(QtGui.qApp.quit)
                self.actionSave.triggered.connect(self.file_save)
                self.actionHelp.triggered.connect(self.hw.show)
                self.actionAbout.triggered.connect(self.aw.show)



                #Connections
                self.connect(self.lw, SIGNAL("okClicked_login"),
                             self.serverConnect)  ##When the signal is received from the login window, call serverConnect


                self.retranslateUi(self)
                QtCore.QMetaObject.connectSlotsByName(self)
                        #Window display 
                self.setGeometry(300, 300, 400, 250)
                self.center()

                self.resize(640, 480)

                self.setWindowTitle('PH5Client')
                self.on_doit
                self.show()




        def retranslateUi(self, MainWindow):
                self.setWindowTitle(QtGui.QApplication.translate("self", "self", None, QtGui.QApplication.UnicodeUTF8))
                self.lineEdit.setText(QtGui.QApplication.translate("self", "", None, QtGui.QApplication.UnicodeUTF8))
                self.pushButton.setText(QtGui.QApplication.translate("self", "Send", None, QtGui.QApplication.UnicodeUTF8))
                self.menuFile.setTitle(QtGui.QApplication.translate("self", "File", None, QtGui.QApplication.UnicodeUTF8))
                self.menuConnect.setTitle(QtGui.QApplication.translate("self", "Connect", None, QtGui.QApplication.UnicodeUTF8))
                self.menuHelp.setTitle(QtGui.QApplication.translate("self", "Help", None, QtGui.QApplication.UnicodeUTF8))
                self.menuAbout.setTitle(QtGui.QApplication.translate("self", "About", None, QtGui.QApplication.UnicodeUTF8))
                self.actionHelp.setText(QtGui.QApplication.translate("self", "Help", None, QtGui.QApplication.UnicodeUTF8))
                #self.toolBar.setWindowTitle(QtGui.QApplication.translate("self", "toolBar", None, QtGui.QApplication.UnicodeUTF8))
                self.actionLocal_Host.setText(QtGui.QApplication.translate("self", "Local Host", None, QtGui.QApplication.UnicodeUTF8))
                self.actionServer.setText(QtGui.QApplication.translate("self", "Server", None, QtGui.QApplication.UnicodeUTF8))
                self.actionExit.setText(QtGui.QApplication.translate("self", "Exit", None, QtGui.QApplication.UnicodeUTF8))
                self.actionSave.setText(QtGui.QApplication.translate("self", "Save", None, QtGui.QApplication.UnicodeUTF8))
                self.actionAbout.setText(QtGui.QApplication.translate("self", "About", None, QtGui.QApplication.UnicodeUTF8))
                self.pushButton_2.setText(QtGui.QApplication.translate("self", "Load File", None, QtGui.QApplication.UnicodeUTF8))

                        #safty net if you close the window
        def closeEvent(self, event):
                time_stamp = str(int(time.time()))
                message = QtGui.QMessageBox.question(self,'Quit Window', 
                                                     "Are you sure?", QtGui.QMessageBox.Yes | 
                                                     QtGui.QMessageBox.No, QtGui.QMessageBox.No)

                if message == QtGui.QMessageBox.Yes:

                        self.client.send_msg(token+' exit '+time_stamp)
                        self.reactor.stop()
                        self.close()
                        event.accept()


                else:
                        event.ignore()

        #This will center the window so the program will always open in the middle
        def center(self):
                quickRight = self.frameGeometry()
                centerPoint = QtGui.QDesktopWidget().availableGeometry().center()
                quickRight.moveCenter(centerPoint)
                self.move(quickRight.topLeft())

        def create_client(self):
                self.client = SocketClientFactory(
                        self.on_client_connect_success,
                        self.on_client_connect_fail,
                        self.on_client_receive)

        def on_doit(self):
                global my_input
                global token
                time_stamp = str(int(time.time()))
                my_input = str(self.lineEdit.text())
                self.client.send_msg(token+" "+my_input+" "+time_stamp)
                self.lineEdit.setText("")

        def file_save(self):
                from os.path import isfile
                fname = QtGui.QFileDialog.getSaveFileName(self, 'Save file', 
                                                          '/home', ".txt")

                file = open(fname, 'w')
                file.write(self.textBrowser.toPlainText())
                file.close()


        def on_client_connect_success(self):
                global token
                global login
                global password
                token=generate_token()

                time_stamp= str(int(time.time()))

                if SSL==1:
                        self.log('Connecting to server via SSL connection...')
                        self.client.send_msg(token+' Welcome to server you are connected via SSL '+time_stamp)
                else:
                        self.log('Connecting to server via NON SSL.')
                        self.client.send_msg(token+' Welcome to server you are connected via NON SSL '+time_stamp)

                if  SERVER_HOST == 'localhost':
                        self.client.send_msg(token+' login localhost 83e3cfe08c6b519634039e0b89bcc7a2 '+time_stamp)
                else: 
                        self.client.send_msg(token+' login '+login+' '+password+' '+time_stamp)

        def on_client_connect_fail(self, reason):
                # reason is a twisted.python.failure.Failure  object
                self.log('Connection failed: %s' % reason.getErrorMessage())

        def on_client_receive(self, msg):
                global ftpname
                global commands

                if msg.startswith("You are now logged in as:"):
                        length= int(len(login))
                        print msg
                        print login
                        print length
                        ftpname= msg[26+length+1:]
                        print ftpname

                        self.log('> %s' % msg[:25+int(len(login))+1])

                ## get list of server commands and save them to a list
                elif msg.startswith("commands:"):

                        msg = msg[10:]
                        msg = msg.replace("'", "")
                        reader = csv.reader([msg], skipinitialspace=True)
                        for r in reader:
                                commands = r
                        print commands

                else:
                        self.log('> %s' % msg)
                        if msg== 'q' or msg=='Q' or msg=='quit' or msg=='Quit':
                                self.connection.disconnect()


        def log(self, msg):
                self.textBrowser.append(str(msg))


        def keyPressEvent(self, event):
                if type(event) == QtGui.QKeyEvent:
                        #here accept the event and do something
                        if event.key() == 16777220:
                                self.on_doit()    
                else:
                        event.ignore()

        def showDialog(self):
                global token
                global ftpname
                fname = QtGui.QFileDialog.getOpenFileName(self, 'Open file', 
                                                          '/home')
                storname =os.path.basename(str(fname))
                s = ftplib.FTP(SERVER_HOST,ftpname, 'redapple') # Connect
                s.cwd('/temp')

                f = open(fname,'rb')                # file to send
                s.storbinary('STOR '+storname, f)         # Send the file

                f.close()                                # Close file and FTP
                s.quit
                self.client.send_msg(token+' file '+storname)



        def serverConnect(self):

                if SSL == 1:
                        print "SSL mode ON"
                        self.connection = self.reactor.connectSSL(SERVER_HOST, SERVER_PORT, self.client, ssl.ClientContextFactory())
                else:
                        print "SSL mode OFF"
                        self.connection = self.reactor.connectTCP(SERVER_HOST, SERVER_PORT, self.client)


        def serverLocalHost(self):

                global SERVER_HOST
                SERVER_HOST = 'localhost'
                if SSL == 1:
                        print "SSL mode ON"
                        self.connection = self.reactor.connectSSL(SERVER_HOST, SERVER_PORT, self.client, ssl.ClientContextFactory())



                else:
                        print "SSL mode OFF"
                        self.connection = self.reactor.connectTCP(SERVER_HOST, SERVER_PORT, self.client)



        def help(self): 

                self.log(str(f = open(os.path.join ('help.html'), 'rb'))) 


####Class for creating and handling  the login window
class LoginWindow(QWidget):
        def __init__(self, *args):
                QWidget.__init__(self, *args)

                global SERVER_HOST
                # Server box
                self.label_Server = QLabel()
                self.label_Server.setText("Server Name:")
                self.ServerBox = QLineEdit(SERVER_HOST)

                # User box
                self.label_User = QLabel()
                self.label_User.setText("User Name:")
                self.UserBox = QLineEdit()

                # Password box
                self.label_Pass = QLabel()
                self.label_Pass.setText("Password:")
                self.PassBox = QLineEdit()
                self.PassBox.setEchoMode(QLineEdit.Password)

                # buttons
                spacer = QSpacerItem(20,40,QSizePolicy.Minimum,QSizePolicy.Expanding)
                self.button_ok = QPushButton()
                self.button_ok.setText("OK")
                self.button_ok.setDefault(True)

                # layout
                self.setWindowTitle('Login')
                layout_right = QVBoxLayout(self)
                layout_right.addWidget(self.label_Server)
                layout_right.addWidget(self.ServerBox)
                layout_right.addWidget(self.label_User)
                layout_right.addWidget(self.UserBox)
                layout_right.addWidget(self.label_Pass)
                layout_right.addWidget(self.PassBox)
                layout_right.addItem(spacer)
                layout_right.addWidget(self.button_ok)


                # connections
                self.connect(self.button_ok, SIGNAL("clicked(bool)"),
                             self.ok_clicked)

        def ok_clicked(self):
                global SERVER_HOST
                global login
                global password
                self.close()

                login = str(self.UserBox.text())
                password = md5Checksum(str(self.PassBox.text()))
                SERVER_HOST = str(self.ServerBox.text())
                self.emit(SIGNAL("okClicked_login"))  

####Class for creating and handling  the help window
class HelpWindow(QWidget):
        def __init__(self, *args):
                QWidget.__init__(self, *args)

                #text window	
                self.window = QTextBrowser()
                helpText=open('help.html').read()          
                self.window.append(helpText)
                self.window.setMinimumHeight(480) 
                # buttons
                spacer = QSpacerItem(20,40,QSizePolicy.Minimum,QSizePolicy.Expanding)
                self.button_ok = QPushButton()
                self.button_ok.setText("Close")
                self.button_ok.setDefault(True)

                # layout
                self.setWindowTitle('You needed this')
                layout_right = QVBoxLayout(self)
                layout_right.addWidget(self.window)
                layout_right.addItem(spacer)
                layout_right.addWidget(self.button_ok)
                self.resize(640, 480)
                self.connect(self.button_ok, SIGNAL("clicked(bool)"),
                             self.ok_clicked)


        def ok_clicked(self):
                self.close()

####Class for creating and handling  the help window
class AboutWindow(QWidget):
        def __init__(self, *args):
                QWidget.__init__(self, *args)

                #text window	
                self.window = QTextBrowser()  
                text = "PH5 Client:\n\nVersion: "+PROG_VERSION+"\n\nComments, Suggestions, and Bug Reports to: \npasscal@passcal.nmt.edu \ndhess@passcal.nmt.edu"        
                self.window.append(text)
                self.window.setMinimumHeight(150) 

                # buttons
                spacer = QSpacerItem(20,40,QSizePolicy.Minimum,QSizePolicy.Expanding)
                self.button_ok = QPushButton()
                self.button_ok.setText("Close")
                self.button_ok.setDefault(True)

                # layout
                self.setWindowTitle('About')
                layout_right = QVBoxLayout(self)
                layout_right.addWidget(self.window)
                layout_right.addItem(spacer)
                layout_right.addWidget(self.button_ok)
                self.resize(350, 200)

                self.connect(self.button_ok, SIGNAL("clicked(bool)"),
                             self.ok_clicked)


        def ok_clicked(self):
                self.close()









def main(): 
        app = QtGui.QApplication(sys.argv)
        app.setQuitOnLastWindowClosed(True)
        try:
                import qt4reactor
        except ImportError:
                # Maybe qt4reactor is placed inside twisted.internet in site-packages?
                from twisted.internet import qt4reactor
        qt4reactor.install()

        from twisted.internet import reactor


        window= PyGui(reactor)
        reactor.run()




if __name__ == '__main__':
        try :
                config_file = sys.argv[1]
        except :
                config_file = os.path.join (os.environ['K3'], 'config/PH5GUI.cfg')

        read_config (config_file) 

        main()