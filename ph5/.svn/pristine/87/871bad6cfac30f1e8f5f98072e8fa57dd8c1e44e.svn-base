#!/usr/bin/env pnpython3

import sys, os
sys.path.append(os.path.join(os.environ['K3'], 'apps', 'pn3'))

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

import random
import Experiment, TimeDOY, mplTurkey

PROG_VERSION = "2014.247.a Developmental"
#
#   To hold table rows and keys
#
class rows_keys (object) :
    __slots__ = ('rows', 'keys')
    def __init__ (self, rows = None, keys = None) :
        self.rows = rows
        self.keys = keys
        
    def set (self, rows = None, keys = None) :
        if rows != None : self.rows = rows
        if keys != None : self.keys = keys

def get_args () :
    ''''''
    global ARRAY, PH5FILE, PH5PATH, SHOT01, SHOTN, STA01, STAN, PRINT
    
    from optparse import OptionParser
    
    oparser = OptionParser ()
    
    oparser.add_option ("-a", "--array", action="store", 
                        type="string", dest="array", metavar="array",
                        default=None)
    
    oparser.add_option ("-s", "--shot-range", action="store", type="string",
                        dest="shot_range", default=None, metavar="shot_range",
                        help="Dash separated shot range.")
    
    oparser.add_option ("-t", "--station-range", action="store", type="string",
                        dest="station_range", default=None, metavar="shot_range",
                        help="Dash separated station range.")    
    
    oparser.add_option ("-n", "--nickname", action="store",
                        type="string", dest="nickname", metavar="nickname")
    
    oparser.add_option ("-p", "--ph5path", action="store", default=".",
                        type="string", dest="ph5_path", metavar="ph5_path")
    
    oparser.add_option ("--print", action="store_true", dest="print_it", default=False)
    
    options, args = oparser.parse_args ()

    PRINT = options.print_it

    if options.station_range != None :
        STA01, STAN = map (int, options.station_range.split ('-'))
    else :
        STA01 = STAN = None

   
    if options.shot_range != None :
        SHOT01, SHOTN = map (int, options.shot_range.split ('-'))
    else :
        SHOT01 = SHOTN = None
        
    NICKNAME = options.nickname
    if options.ph5_path :
        PH5PATH = options.ph5_path
    else :
        PH5PATH = '.'
        
    ARRAY = options.array
    if not NICKNAME :
        print >>sys.stderr, "Missing options. Try -h."
        sys.exit ()
    if NICKNAME[-3:] == 'ph5' :
        PH5FILE = os.path.join (PH5PATH, NICKNAME)
    else :
        PH5FILE = os.path.join (PH5PATH, NICKNAME + '.ph5')
        
    if not os.path.exists (PH5FILE) :
        sys.stderr.write ("Error: %s not found.\n" % PH5FILE)
        sys.exit (-1)
            
#
#   Initialize ph5 file
#
def initialize_ph5 (editmode = False) :
    '''   Initialize the ph5 file   '''
    global EX
    
    EX = Experiment.ExperimentGroup (PH5PATH, PH5FILE)
    EX.ph5open (editmode)
    EX.initgroup ()
    
#
#   Read table giving event times and locations
#
def read_event_table () :
    '''   Read /Experiment_g/Sorts_g/Event_t   '''
    global EVENT_T
    
    events, event_keys = EX.ph5_g_sorts.read_events ()
    if SHOT01 != None :
        event_t = []
        for e in events :
            if int (e['id_s']) >= SHOT01 and int (e['id_s']) <= SHOTN :
                event_t.append (e)
                
    else :
        event_t = events
    
    rowskeys = rows_keys (event_t, event_keys)
    
    EVENT_T = rowskeys 

def read_sort_arrays () :
    '''   Read /Experiment_t/Sorts_g/Array_t_[n]   '''
    global ARRAY_T
    
    ARRAY_T = {}
    #   We get a list of Array_t_[n] names here...
    #   (these are also in Sort_t)
    names = EX.ph5_g_sorts.names ()
    if ARRAY :
        name = "Array_t_{0:03d}".format (int (ARRAY))
        if name in names :
            names = (name,)
        else :
            print >>sys.stderr, "No array {0}".format (name)
            sys.exit ()
    else :
        return
        
    for n in names :
        arrays, array_keys = EX.ph5_g_sorts.read_arrays (n)
        if STA01 :
            array_t = []
            for a in arrays :
                if int (a['id_s']) >= STA01 and int (a['id_s']) <= STAN :
                    array_t.append (a)
                    
        else :
            array_t = arrays
        
        rowskeys = rows_keys (array_t, array_keys)
        #   We key this on the name since there can be multiple arrays
        ARRAY_T[n] = rowskeys
        
def getTDOY (epoch) :
    tdoy = TimeDOY.TimeDOY (year=None, 
                            month=None, 
                            day=None, 
                            hour=0, 
                            minute=0, 
                            second=0, 
                            microsecond=0, 
                            doy=None, 
                            epoch=epoch)
    
    return tdoy 

def find_start_stops (Das_t) :
    st = []
    sp = []
    
    for das_t in Das_t.rows :
        #ran = random.randint (1, 99)
        #if ran % 3 : continue
        if das_t['channel_number_i'] != 1 : continue
        start = das_t['time/epoch_l'] + das_t['time/micro_seconds_i'] / 1000000.
        stop = start + float (das_t['sample_count_i']) / float (das_t['sample_rate_i']) / float (das_t['sample_rate_multiplier_i'])

        st.append (getTDOY (start))
        
        sp.append (getTDOY (stop))
        
    return st, sp
    
def get_das_groups () :
    global DAS_GROUPS
    
    DAS_GROUPS = EX.ph5_g_receivers.alldas_g ()
    
def read_das_table (das) :
    dass = DAS_GROUPS.keys ()
    if not das in dass :
        return None
    
    g = DAS_GROUPS[das]
    EX.ph5_g_receivers.setcurrent (g)
    rows, keys = EX.ph5_g_receivers.read_das ()
    return rows_keys (rows, keys)

def print_bar_data (bd) :
    print ARRAY, bd.min.getISOTime (), bd.max.getISOTime ()
    for bi in bd.bar_info :
        print bi.label, bi.das, bi.deploy.getISOTime (), bi.pickup.getISOTime ()
        for b in bi.bars :
            print '\t', b.left.getISOTime (), b.right.getISOTime ()
        
if __name__ == '__main__' :
    global START_STOP, DEPLOY_PICKUP
    START_STOP = {}
    DEPLOY_PICKUP = {}
    get_args ()
    
    initialize_ph5 ()
    get_das_groups ()
    read_sort_arrays ()
    read_event_table ()
    
    BD = mplTurkey.BarData ()
    for event_t in EVENT_T.rows :
        shot = event_t['id_s']
        time = event_t['time/epoch_l']
        us = event_t['time/micro_seconds_i']
        sh = mplTurkey.Shot ()
        sh.id_s = shot
        sh.time = TimeDOY.TimeDOY (year=None, 
                                   month=None, 
                                   day=None, 
                                   hour=0, 
                                   minute=0, 
                                   second=0, 
                                   microsecond=us, 
                                   doy=None, 
                                   epoch=time, 
                                   dtobject=None)
        BD.shots.append (sh)
    
    keys = ARRAY_T.keys ()
    
    for k in keys :
        for array_t in ARRAY_T[k].rows :
            if array_t['channel_number_i'] != 1 :
                continue
            station = int (array_t['id_s'])
            das = array_t['das/serial_number_s']
            deploy_time = array_t['deploy_time/epoch_l']
            pickup_time = array_t['pickup_time/epoch_l']
            Das_t = read_das_table (das)
            if Das_t == None or len (Das_t.rows) == 0 : continue
            st, sp = find_start_stops (Das_t)
            START_STOP[das] = (st, sp)
            DEPLOY_PICKUP[station] = (das, getTDOY (deploy_time), getTDOY (pickup_time), k)
            
    stations = DEPLOY_PICKUP.keys ()
    stations.sort ()
    #
    for station in stations :
        BI = mplTurkey.BarInfo (station)
        BI.deploy = DEPLOY_PICKUP[station][1]
        BI.pickup = DEPLOY_PICKUP[station][2]
        if TimeDOY.compare (BI.deploy, BD.min) < 0 :
            BD.min = BI.deploy
            
        if TimeDOY.compare (BI.pickup, BD.max) > 0 :
            BD.max = BI.pickup
            
        das = DEPLOY_PICKUP[station][0]
        BI.das = das
        starts = START_STOP[das][0]; stops = START_STOP[das][1]
        for start, stop in zip (starts, stops) :
            B = mplTurkey.Bars ()
            B.left = start; B.right = stop
            BI.bars.append (B)
                
        BD.bar_info.append (BI)
        BD.array = ARRAY
    
    if PRINT :
        print_bar_data (BD)
    else :
        turkey_plot = mplTurkey.Turkey (BD)
        turkey_plot.show ()
    #print_bar_data (BD)
    #print "Array_t_{0:03d}".format (int (ARRAY))
    #for s in stations :
        #print s, DEPLOY_PICKUP[s][1].getFdsnTime (), DEPLOY_PICKUP[s][2].getFdsnTime ()
        #das = DEPLOY_PICKUP[s][0]
        #print '\t', das
        #for start, stop in START_STOP[das] :
            #if (start.epoch () >= DEPLOY_PICKUP[s][1].epoch ()) and (start.epoch () <= DEPLOY_PICKUP[s][2].epoch ()) :
                ##   Start within deploy pickup
                #print 'A\t', start.getFdsnTime (), stop.getFdsnTime ()
            #elif (stop.epoch () >= DEPLOY_PICKUP[s][1].epoch ()) and (stop.epoch () <= DEPLOY_PICKUP[s][2].epoch ()) :
                ##   Stop within deploy pickup
                #print 'B\t', start.getFdsnTime (), stop.getFdsnTime ()
            #elif (start.epoch () <= DEPLOY_PICKUP[s][1].epoch ()) and (stop.epoch () >= DEPLOY_PICKUP[s][2].epoch ()) :
                ##   
                #print 'C\t', start.getFdsnTime (), stop.getFdsnTime ()
            #else :
                #print 'D'