import PH5ProcessProtocol as processor
import sys
from RE import *
import re
import struct
import glob
import shutil
import os, os.path
import hashlib
from subprocess import call
import zipfile
from PH5DB import *


PROG_VERSION = "2013.021.b"

DATAROOT = None
EXPERIMENT_DIR = None
K3 = None
SSL = None


commands =['get experiments','get_kef','commands','create experiment <experiment name>', 'execute', 'experiment', 'exit',  'experiment <experiment name>', 'file <file name>']


#create experiment
def create_experiment(token, logged_in, data, username, DATAROOT, EXPERIMENT_DIR):
        if int(logged_in) == 1 :
                temp=data
                experiment_name=temp[18:]

                if not os.path.exists(os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name)) :
                        os.makedirs( os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name))

                        write_session(token, 'experiment_name', experiment_name,  DATAROOT, EXPERIMENT_DIR)
                        userid=get_userid(username,  DATAROOT, EXPERIMENT_DIR)
                        print userid
                        add_experiment(experiment_name, userid,  DATAROOT, EXPERIMENT_DIR)
                        response ="you are now working with experiment "+experiment_name
                else:
                        write_session(token, 'experiment_name', experiment_name,  DATAROOT, EXPERIMENT_DIR)
                        response ="Experiment already exists..setting your workign experiment as "+experiment_name
        else:
                response = "You must be logged in!"
        return response

#Function to edit ph5 file
def do_edit(data): 
        #remove the intial command
        temp=data
        temp=temp[5:]

        if temp.startswith("nickname"):
                temp=temp[9:]    
                response = "experiment nickname changed to: "+temp  

        if temp.startswith("name"):
                temp=temp[5:]    
                response = "experiment name changed to: "+temp 

        if temp.startswith("PIs"):
                temp=temp[4:]    
                response = "experiment PIs changed to: "+temp 

        if temp.startswith("Institutions") or temp.startswith("institutions"):
                temp=temp[13:]    
                response = "experiment institutions changed to: "+temp 

        if temp.startswith("Description") or temp.startswith("description"):
                temp=temp[12:]    
                response = "experiment Description changed to: "+temp 

        ## event sub routine
        if temp.startswith("Event") or temp.startswith("event"):
                temp=temp[6:]
                event_num=temp[0]

                temp=temp[2:]
                print temp
                if temp.startswith("Sample rate") or temp.startswith("sample rate"): 
                        temp=temp[12:] 
                        response ="Event "+event_num+ " sample rate changed to: "+temp

                elif temp.startswith("Channel number") or temp.startswith("channel number"): 
                        temp=temp[15:] 
                        response ="Event "+event_num+ " Channel number changed to: "+temp
                else:
                        response ="Invalid syntax after Event." 
        ##end event sub routine        

        print temp

        return response


##handle setting active experiment
def do_experiment(token, logged_in, username, data, DATAROOT, EXPERIMENT_DIR):
        if int(logged_in) == 1:
                #################
                temp=data 
                experiment_name=temp[11:]
                okay = part_of_experiment(username, experiment_name, DATAROOT, EXPERIMENT_DIR)
                okay2 = get_lock(username, experiment_name, DATAROOT, EXPERIMENT_DIR)

                exist=os.path.isdir(os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name))
                if exist:
                        if int(okay) == 1 and int(okay2) == 0:
                                write_session(token, 'experiment_name', experiment_name, DATAROOT, EXPERIMENT_DIR)
                                set_lock(username, experiment_name, DATAROOT, EXPERIMENT_DIR, 1)
                                response="you are now working with experiment "+experiment_name
                        else: 

                                response = "You do not have permission to work on this experiment or this experiment is being used by another user"
                else:
                        response="experiment doesn't exist! Please use command 'create experiment <name>'" 
        else:
                response = "You must be logged in to do this!"


        return response

## Take login command with username and hashed password, parse it, then authenticate via database
def do_login(data, token, DATAROOT, EXPERIMENT_DIR):
        temp=data[6:] #get rid of the "login" command
        p = re.compile('^[^ ]+(?= )') #search for the username
        m= p.search(temp)
        username= m.group()
        password=temp[int(m.end())+1:] #remove username and space leaving only the password
        authenticated =Authenticate(username, password, DATAROOT, EXPERIMENT_DIR) 

        if authenticated == 1:
                write_session(token,"logged_in", 1, DATAROOT, EXPERIMENT_DIR)
                write_session(token, "username", username, DATAROOT, EXPERIMENT_DIR)
                message ="You are now logged in as: "+username+" "+EXPERIMENT_DIR
        else:
                message ="Credentials incorrect. Please try again."


        return(message)


#execute a kef
def execute_kef(my_file, experiment_name, DATAROOT, EXPERIMENT_DIR): 

        response =""

        if experiment_name =="":
                response="In order to execute a kef you must have an experiment selected. Use command 'experiment <name>'"
        else:
                kef = os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name, my_file)
                #nick = 'master'
                nick = os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name, 'master')

                args =[]
                print kef
                print nick           
                if my_file.startswith("Experiment_t") and not os.path.exists (nick) :

                        command = "initialize-ph5.py"
                        args.append(" ")
                        args.append("--kef={0}".format (kef))
                        args.append("--nickname={0}".format(nick))
                        #args.append("--path={0}".format(path))
                        response="\nExperiment_t file recognized using it to initialize PH5 file for experiment " + experiment_name



                        try :
                                processor.run(command, args)
                        except Exception, e :
                                response += str(e)

                else:
                        #os.chdir(K3)
                        args =[]
                        command = "kef2ph5.py"
                        args.append(" ")
                        args.append("--kef={0}".format (kef))
                        args.append("--nickname={0}".format(nick))
                        args.append("--path={0}".format(path))
                        response="\n found file " + my_file + " ... executing now"
                        processor.run(command, args)




        return response

##Execute/process TRD
def execute_trd(my_file, experiment_name, DATAROOT, EXPERIMENT_DIR):
        response =""

        if experiment_name =="":
                response="In order to process  a trd you must have an experiment selected. Use command 'experiment <name>'"
        else:
                trd = os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name, my_file)
                nick = os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name, 'master')
                args =[]
                command = "125a2ph5.py"
                args.append(" --nickname={0}".format(nick))
                args.append(" --raw={0}".format(trd))
                response="\nTRD file recognized processing it for for experiment " + experiment_name + "\n"
                processor.run(command,args)

        return response



##Execute/process TRD LIST
def execute_trd_list(my_list, experiment_name, DATAROOT, EXPERIMENT_DIR ):
        response =""

        if experiment_name =="":
                response="In order to process  a trd you must have an experiment selected. Use command 'experiment <name>'"
        else:
                trd = os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name, my_liste)
                nick =  os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name, 'master')
                args=[]
                command = "125a2ph5.py"
                args.append("-n{0}".format(nick))
                args.append("--file={0}".format(trd))
                response="\nTRD file list recognized processing it for for experiment " + experiment_name + "\n"
                processor.run(command, args)

        return response

#execute a trd zip
def execute_trd_zip(my_file, experiment_name, DATAROOT, EXPERIMENT_DIR): 
        if experiment_name != "":

                l=[]
                response =''
                my_path=os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name)

                zip = zipfile.ZipFile(os.path.join (my_path, my_file))
                my_file_dir=my_file[:-4]


                if not os.path.exists(os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name, my_file_dir)) :
                        os.makedirs(os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name, my_file_dir))
                zip.extractall(os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name, my_file_dir))

                response = response + "\n extracted to: "+experiment_name+"/"+my_file_dir+"\n ...creating list"



                for dirname, dirnames, filenames in os.walk(os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name, my_file_dir)):
                        for subdirname in dirnames:
                                temp=os.path.join(dirname, subdirname)
                                temp=temp[2:]
                                l.append(temp)


                master_list =""
                for directory in l:
                        os.chdir(directory)

                        my_list =""
                        for files in glob.glob("*.TRD"):
                                my_list=my_list+files+"\n"
                                master_list=master_list+my_file_dir+"/"+directory+"/"+files+"\n"
                        for files in glob.glob("*.trd"):
                                my_list=my_list+files+"\n"
                                master_list=master_list+my_file_dir+"/"+directory+"/"+files+"\n"
                        f = open(my_file_dir+".txt", 'w')
                        f.write(my_list)
                        f.close()
                        os.chdir("..")

                os.chdir("..")
                f = open(my_file_dir+".txt", 'w')
                f.write(master_list)
                f.close()

                response=execute_trd_list(my_file_dir+".txt", experiment_name)

        return response

#execute a zip
def execute_zip(my_file): 
        l=[]
        response =''
        temp = my_file
        temp = temp[:-4]
        data = "create experiment "+temp
        response = create_experiment(data)
        zip = zipfile.ZipFile('temp/'+my_file)

        os.chdir(EXPERIMENT_DIR)
        zip.extractall(experiment_name)
        response = response + "\n extracted to: "+experiment_name+"\n ...continuing to create PH5 files"
        os.chdir(experiment_name)
        files = filter(os.path.isfile, os.listdir('.'))  
        files.sort()
        print files

        for f in files:
                if f[-3:] == "kef" or f[-3:] == "KEF":
                        if f.startswith("Experiment_t"):
                                l.append(f)


        for f in files:
                if f[-3:] == "kef" or f[-3:] == "KEF":
                        if f.startswith("Offset_t"):
                                l.append(f)


        for f in files:
                if f[-3:] == "kef" or f[-3:] == "KEF":
                        if f.startswith("Array_t"):
                                l.append(f)  

        for f in files:
                if f[-3:] == "kef" or f[-3:] == "KEF":
                        if f.startswith("Time_t"):
                                l.append(f)   

        for f in files:
                if f[-3:] == "kef" or f[-3:] == "KEF":
                        if f.startswith("Sort_t"):
                                l.append(f) 

        for f in files:
                if f[-3:] == "kef" or f[-3:] == "KEF":
                        if f.startswith("Receiver_t"):
                                l.append(f)   

        for f in files:
                if f[-3:] == "kef" or f[-3:] == "KEF":
                        if f.startswith("Response_t"):
                                l.append(f)  

        for f in files:
                if f[-3:] == "kef" or f[-3:] == "KEF":
                        if f.startswith("Event_t"):
                                l.append(f)  

        for f in l:
                if f[-3:] == "kef" or f[-3:] == "KEF":
                        response = response + execute_kef(f)

        return response

#change file to edit
def file_to_edit(token, filename, logged_in,experiment_name, DATAROOT, EXPERIMENT_DIR):
        if int(logged_in) == 1:

                temp=filename
                path=""
                ftype=temp[-3:]
                temp=temp[5:]
		
                exist=os.path.isfile(os.path.join (DATAROOT, EXPERIMENT_DIR, 'temp', temp))
                if exist == True:
                        if experiment_name !="":
                                shutil.copyfile(os.path.join (DATAROOT, EXPERIMENT_DIR, 'temp', temp), os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name, temp))
                                os.remove(os.path.join (DATAROOT, EXPERIMENT_DIR, 'temp', temp))
                                write_session(token, "file_to_work", temp, DATAROOT, EXPERIMENT_DIR)
                                write_session(token, "ftype", ftype, DATAROOT, EXPERIMENT_DIR)
                                response = "you are now working with file: "+temp
                        else:

                                response = "You must select an experiment to work with"

                elif os.path.isfile(os.path.join (DATAROOT, EXPERIMENT_DIR, experiment_name, temp)):
                        write_session(token, "file_to_work", temp, DATAROOT, EXPERIMENT_DIR)
                        write_session(token, "ftype", ftype, DATAROOT, EXPERIMENT_DIR)
                        response = "you are now working with file: "+temp

                else:
                        response = "file does not exist on server!"

        else:
                response = "You must be logged in to do this action!"

        return (response)

#get command list
def get_commands():

        global commands
        response = 'commands: '+str(commands).strip('[]')


        return (response)

#get a kef file
def get_kef(token, logged_in, data, experiment_name, DATAROOT, EXPERIMENT_DIR):
        args =[]

        response=""
        if int(logged_in) == 1:
                command = "tabletokef.py"

                args.append(" ")
                args.append("-nmaster")
                args.append("-p{0}".format (DATAROOT+EXPERIMENT_DIR+"/"+experiment_name))


                kef_type=data[8:]



                if  kef_type.startswith("Experiment_t"):
                        args.append("-E")

                if  kef_type.startswith("Sort_t"):
                        args.append("-S")

                if  kef_type.startswith("Offset_t"):
                        args.append("-O")

                if  kef_type.startswith("Event_t"):
                        args.append("-V")

                if  kef_type.startswith("Array_t"):
                        n = kef_type[8:]			
                        args.append("-A"+n)


                if  kef_type.startswith("Response_t"):
                        args.append("-R")

                if  kef_type.startswith("Report_t"):
                        args.append("-P")

                if  kef_type.startswith("Receiver_t"):
                        args.append("-C")

                if  kef_type.startswith("Index_t"):
                        args.append("-I")

                if  kef_type.startswith("Das_t"):
                        n = kef_type[6:]
                        print n			
                        args.append("-D"+n)

                if  kef_type.startswith("Time_t"):
                        args.append("-T")





                try :
                        processor.run(command, args)
                except Exception, e :
                        response= str(e)


                while True:
                        if os.path.isfile(DATAROOT+EXPERIMENT_DIR+"/"+experiment_name+"/temp.kef") == True:
                                response = "get temp.kef from experiment folder"
                                break
                        else: 
                                response = "hmm"


        return(response)

#create md5checksum
def md5Checksum(filePath):
        fh = open(filePath, 'rb')
        m = hashlib.md5()
        while True:
                data = fh.read(8192)
                if not data:
                        break

                m.update(data)
        return m.hexdigest()


#Prepare to execute a filetype
def prepare_execute(token, logged_in, ftype, file_to_work, experiment_name, DATAROOT, EXPERIMENT_DIR): 
        if int(logged_in) == 1:
                response =""
                temp=file_to_work

                if ftype=="kef" or ftype=="KEF":
                        response="executing kef...\n"
                        response =response + execute_kef(temp, experiment_name, DATAROOT, EXPERIMENT_DIR)

                elif ftype=="ph5" or ftype=="PH5":
                        response = "executing is only allowed for kef and bat "

                elif ftype=="zip" or ftype=="ZIP":
                        response = "executing zip...\n"
                        if temp.startswith("RAW") or temp.startswith("raw"):
                                response = response + execute_trd_zip(temp, experiment_name, DATAROOT, EXPERIMENT_DIR)

                        else:			
                                response = response + execute_zip(temp, DATAROOT, EXPERIMENT_DIR)

                elif ftype=="trd" or ftype=="TRD":
                        if experiment_name != "":
                                response = "processing trd...\n"
                                response = response + execute_trd(temp, experiment_name, DATAROOT, EXPERIMENT_DIR )
                        else:
                                response = 'You must be working with an experiment to process TRD files\n'

                else:
                        response = "unknown file type"

        else:
                response = "You must be logged in to do this."

        return response

#prep ph5
def prep_ph5(my_file): 
        response =""
        temp=my_file
        response="PH5 file prepped"
        return response



#Parses the token, checks to see if client already has a session, if not create a session
def process_token(data, DATAROOT, EXPERIMENT_DIR):

        token = data[:32]
        time_stamp=data[-10:]
        data=data[33:-11]

        session = Get_Session(token, DATAROOT, EXPERIMENT_DIR)

        if session == []:
                print "no session...creating one"
                Init_Session(token, DATAROOT, EXPERIMENT_DIR)		
                session = Get_Session(token, DATAROOT, EXPERIMENT_DIR)



        session=session.pop(0)
        logged_in=int(session[1])
        file_to_work=session[2]
        myfile=session[3]
        ftype=session[4]
        experiment_name=session[5]
        load_data=session[6]
        username=session[7]

        write_session(token,"time_stamp", time_stamp, DATAROOT, EXPERIMENT_DIR)


        return(logged_in, file_to_work, myfile, ftype, experiment_name, load_data, username, token, data, time_stamp)


def read_config ():
        global DATAROOT, EXPERIMENT_DIR, K3, SSL
        data= Get_Config()
        data = data.pop(0)

        DATAROOT = data[0]
        K3 = data[1]
        EXPERIMENT_DIR = data[2]
        SSL = data[3]
        return (DATAROOT, EXPERIMENT_DIR, K3, SSL)




def read_session (token,  DATAROOT, EXPERIMENT_DIR):
        session = Get_Session(token,  DATAROOT, EXPERIMENT_DIR)
        session=session.pop(0)
        logged_in=int(session[1])
        file_to_work=session[2]
        myfile=session[3]
        ftype=session[4]
        experiment_name=session[5]
        load_data=session[6]
        username=session[7]


        return (logged_in, file_to_work, myfile, ftype, experiment_name, load_data, username)

