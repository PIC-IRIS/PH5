#!/usr/bin/env picpython

#
#   Convert Antelope batch file to dep file format
#   Steve Azevedo, Sept, 2010
#

import sys, os
import time, calendar, TimeDoy

PROG_VERSION = '2011.157.1'

os.environ['TZ'] = 'UTC'
time.tzset ()

#   List of batch keyed on DAS
BATCH = {}
WORKING_BATCH = None
CURRENT_DAS = None
#CURRENT_TIME = None
CURRENT_STA = None
CODE = None
NET = None

#   Only for 3 channel RefTeks
CHAN_MAP = { 'Z':'1', 'N':'2', 'E':'3' }

class sta (object) :
    __slots__ = 'code', 'lat', 'lon', 'elev', 'staname'
    
class mtime (object) :
    __slots__ = 'year', 'month', 'day', 'hour', 'minute', 'seconds', 'epoch'
    def __init__ (self) :
        self.year = None
    
class net (object) :
    __slots__ = 'netcode', 'netname'
    
class datalogger (object) :
    __slots__ = 'code', 'serialnumber', 'dlsta', 'dlloc'
    
class sensor (object) :
    __slots__ = 'code', 'edepth', 'serialnumber', 'loc', 'stream'
    
class samplerate (object) :
    __slots__ = 'code', 'loc'
    
class channel (object) :
    __slots__ = 'label', 'chan', 'loc', 'dlchan'
    
class channels (object) :
    def __init__ (self) :
        self.channel = {}
        self.samplerate = samplerate ()
    
class batch (object) :
    def __init__ (self) :
        self.sta = sta ()
        self.time = mtime ()
        self.close = mtime ()
        #self.net = net ()
        self.datalogger = datalogger ()
        #self.sensor = sensor ()
        self.sensor = []
        #   Keyed on samplerate code
        #      Points to an instance of channels
        #self.stream = {}
        
def parse_sta (flds) :
    global WORKING_BATCH, CURRENT_STA
    l = len (flds)
    if not WORKING_BATCH :
        wb = WORKING_BATCH = batch ()
    else :
        wb = WORKING_BATCH
    
    wb.sta.code = flds[1]
    CURRENT_STA = flds[1]
    if l > 3 :
        wb.sta.lat = flds[2]
        wb.sta.lon = flds[3]
        
    if l > 4 :
        wb.sta.elev = flds[4]
        
    if l > 5 :
        wb.sta.staname = flds[5]
        
def parse_time (flds) :
    global WORKING_BATCH
    
    tdoy = TimeDoy.TimeDoy ()
    
    l = len (flds)
    if not WORKING_BATCH :
        wb = WORKING_BATCH = batch ()
    else :
        wb = WORKING_BATCH
    
    time_date = flds[1]
    if l == 3 :
        time_time = flds[2]
    else :
        time_time = '00:00:00'
    
    wb.time.month, wb.time.day, wb.time.year = time_date.split ('/')
    wb.time.hour, wb.time.minute, wb.time.seconds = time_time.split (':')
    wb.time.epoch = time.mktime ((int (wb.time.year),
                                 int (wb.time.month),
                                 int (wb.time.day),
                                 int (wb.time.hour),
                                 int (wb.time.minute),
                                 int (wb.time.seconds),
                                 -1,
                                 -1,
                                 -1))
    
    
def parse_close (flds) :
    global BATCH
    
    sta = flds[1].strip ()
    
    if BATCH.has_key (sta) :
        wbs = BATCH[sta]
    else :
        sys.stderr.write ("Error: Close with no previous open for station {0:s}\n".format (sta))
        return
    
    newwbs = []
    try :
        for wb in wbs :
            if wb.close.year :
                newwbs.append (wb)
                continue
            
            close_date = flds[2]
            close_time = flds[3]
            
            wb.close.month, wb.close.day, wb.close.year = close_date.split ('/')
            wb.close.hour, wb.close.minute, wb.close.seconds = close_time.split (':')
            wb.close.epoch = time.mktime ((int (wb.close.year),
                                          int (wb.close.month),
                                          int (wb.close.day),
                                          int (wb.close.hour),
                                          int (wb.close.minute),
                                          int (wb.close.seconds),
                                          -1,
                                          -1,
                                          -1))
            newwbs.append (wb)
    except Exception, e :
        sys.stderr.write ("Error: {0}\n".format (e))
        sys.stderr.write ("Line: {0}\n".format (' '.join (flds)))
        sys.exit ()
        
    BATCH[sta] = newwbs
    
def parse_net (flds) :
    global NET
    l = len (flds)
    if not NET :
        NET = net ()
        
    NET.netcode = flds[1]
    NET.netname = flds[2]
    
def parse_datalogger (flds) :
    global WORKING_BATCH, CURRENT_DAS
    l = len (flds)
    if not WORKING_BATCH :
        wb = WORKING_BATCH = batch ()
    else :
        wb = WORKING_BATCH
        
    wb.datalogger.code = flds[1]
    wb.datalogger.serialnumber = flds[2]
    CURRENT_DAS = flds[2]
    if l > 3 :
        wb.datalogger.dlsta = flds[3]
        
    if l > 4 :
        wb.datalogger.dlloc = flds[4]
        
def parse_sensor (flds) :
    global WORKING_BATCH
    l = len (flds)
    if not WORKING_BATCH :
        wb = WORKING_BATCH = batch ()
    else :
        wb = WORKING_BATCH
        
    lsensor = sensor ()
    lsensor.stream = {}
    lsensor.code = flds[1]
    lsensor.edepth = flds[2]
    lsensor.serialnumber = flds[3]
    if l > 4 :
        lsensor.loc = flds[4]
        
    wb.sensor.append (lsensor)
        
def parse_samplerate (flds) :
    global WORKING_BATCH, CODE
    l = len (flds)
    if not WORKING_BATCH :
        wb = WORKING_BATCH = batch ()
    else :
        wb = WORKING_BATCH
        
    CODE = flds[1]
    #   We should already have a sensor
    sens = wb.sensor[-1]
    lstream = sens.stream
    
    lstream[CODE] = channels ()
    
    lstream[CODE].samplerate.code = CODE
    
    if l > 2 :
        lstream[CODE].samplerate.loc = flds[2]
        
def parse_channel (flds) :
    global WORKING_BATCH, CODE
    l = len (flds)
    if not WORKING_BATCH :
        wb = WORKING_BATCH = batch ()
    else :
        wb = WORKING_BATCH
        
    if flds[2] == 'off' :
        return
    
    sens = wb.sensor[-1]
    if sens.stream :
        lstream = sens.stream[CODE]
    else :
        lstream = sens.stream
        
    label = flds[1]
    lstream.channel[label] = channel ()
    lstream.channel[label].label = label
    if l > 2 :
        lstream.channel[label].chan = flds[2]
        
    if l > 3 :
        lstream.channel[label].loc = flds[3]
        
    if l > 4 :
        lstream.channel[label].dlchan = flds[4]
        
def close_entry_on_das () :
    global WORKING_BATCH, CURRENT_DAS
        
    if BATCH.has_key (CURRENT_DAS) :
        BATCH[CURRENT_DAS].append (WORKING_BATCH)
    else :
        BATCH[CURRENT_DAS] = []
        BATCH[CURRENT_DAS].append (WORKING_BATCH)
    
    WORKING_BATCH = None
    CURRENT_DAS = None
    CODE = None

def close_entry_on_sta () :
    global WORKING_BATCH, CURRENT_STA
        
    if BATCH.has_key (CURRENT_STA) :
        BATCH[CURRENT_STA].append (WORKING_BATCH)
    else :
        BATCH[CURRENT_STA] = []
        BATCH[CURRENT_STA].append (WORKING_BATCH)
    
    WORKING_BATCH = None
    CURRENT_STA = None
    CODE = None
    
def belch_dep () :
    tdoy = TimeDoy.TimeDoy ()
    stas = map (int, BATCH.keys ())
    print "#   batch2dep v%s created: %s UTC %+d" % (PROG_VERSION, time.ctime (time.time ()), time.timezone / 3600)
    stas.sort ()
    for s in stas :
        s = str (s)
        wbs = BATCH[s]
        for wb in wbs :
            station = wb.sta.code
            lat = wb.sta.lat
            lon = wb.sta.lon
            elev = wb.sta.elev
            try :
                deployptm = tdoy.epoch2PasscalTime (float (wb.time.epoch))
            except :
                deployptm = tdoy.epoch2PasscalTime (0.0)
                
            try :
                pickupptm = tdoy.epoch2PasscalTime (float (wb.close.epoch))
            except :
                pickupptm = tdoy.epoch2PasscalTime (1356998400.0)
                
            #   Convert elevation to meters
            try :
                elev = int (float (elev) * 1000)
            except :
                elev = 0
                
            das = wb.datalogger.serialnumber
            das_type = wb.datalogger.code
            
            netcode = NET.netcode
            for sensor in wb.sensor :
                #codes = sensor.stream.keys ()
                sensor_serial = sensor.serialnumber
                for sr in sensor.stream.keys () :
                    #sr = sensor.stream[c]
                    samplerate = sr[:-3]
                    channels = []
                    for ch in sensor.stream[sr].channel :
                        chan = sensor.stream[sr].channel[ch].chan
                        l = sensor.stream[sr].channel[ch].label
                        channels.append (CHAN_MAP[l])
                        #das;refchan;refstrm;netcode;station;channel;samplerate;gain
                    
                    channels.sort ()
                    for channel in channels :
                        #print s, channel, sr, netcode, das, chan, samplerate, 'x1'
                        print "RECV;%s;%s;%s;%s;%s;%s;%s;%s;%s;%d;%s;%s;%s;%s;%s" % (das,                 #   DAS serial number
                                                                                     station,             #   Station ID
                                                                                     station[0],          #   Line
                                                                                     das_type,            #   Type of DAS
                                                                                     channel,             #   Channel 1 -> Z, 2 -> N, 3 -> E
                                                                                     sensor_serial,       #   Sensor serial number
                                                                                     "",                  #   Uphole?
                                                                                     lat,                 #   Latitude dd.dddd
                                                                                     lon,                 #   Longitude ddd.dddd
                                                                                     elev,                #   Elevation meters
                                                                                     "",                  #   Deploy / Pickup team
                                                                                     deployptm,           #   Deploy time
                                                                                     pickupptm,           #   Pickup time
                                                                                     "",                  #   Shots covered
                                                                                     "")                  #   Comment
        
if __name__ == '__main__' :
    try :
        batch_file = sys.argv[1]
        fh = open (batch_file)
    except :
        sys.stderr.write ("Version: %s\nUsage: batch2dep batch_file > file.dep\n" % PROG_VERSION)
        sys.exit ()
        
    n = 0
    while 1 :
        line = fh.readline ()
        if not line : break
        n += 1
        line = line.strip ()
        flds = line.split ()
        if not flds : continue
        #print line, flds
        if flds[0] == 'sta' :
            try :
                parse_sta (flds)
            except Exception, e :
                sys.stderr.write ("Error: {0}\n{2}: {1}\n".format (e, line, n))
                
        elif flds[0] == 'time' :
            try :
                parse_time (flds)
            except Exception, e :
                sys.stderr.write ("Error: {0}\n{2}: {1}\n".format (e, line, n))
                
        elif flds[0] == 'net' :
            try :
                parse_net (flds)
            except Exception, e :
                sys.stderr.write ("Error: {0}\n{2}: {1}\n".format (e, line, n))
                
        elif flds[0] == 'datalogger' :
            try :
                parse_datalogger (flds)
            except Exception, e :
                sys.stderr.write ("Error: {0}\n{2}: {1}\n".format (e, line, n))
                
        elif flds[0] == 'sensor' :
            try :
                parse_sensor (flds)
            except Exception, e :
                sys.stderr.write ("Error: {0}\n{2}: {1}\n".format (e, line, n))
                
        elif flds[0] == 'samplerate' :
            try :
                parse_samplerate (flds)
            except Exception, e :
                sys.stderr.write ("Error: {0}\n{2}: {1}\n".format (e, line, n))
                
        elif flds[0] == 'channel' :
            try :
                parse_channel (flds)
            except Exception, e :
                sys.stderr.write ("Error: {0}\n{2}: {1}\n".format (e, line, n))
                
        elif flds[0] == 'add' :
            #close_entry_on_das ()
            try :
                close_entry_on_sta ()
            except Exception, e :
                sys.stderr.write ("Error: {0}\n{2}: {1}\n".format (e, line, n))
                
        elif flds[0] == 'close' :
            try :
                parse_close (flds)
            except Exception, e :
                sys.stderr.write ("Error: {0}\n{2}: {1}\n".format (e, line, n))
                
        elif flds[0] == 'axis' :
            pass
        else :
            sys.stderr.write ("Skipping line: %s\n" % line)
    
    belch_dep ()
    