class entrypointinfo:
    def __init__(self):
        self.entrypoints = {
            'gui_scripts':{
                'experiment_t_gen':[
                    "a GUI for building the experiment summary kitchen-exchange format (kef) file",
                    'ph5.utilities.changes:startapp'
                    ],
                'kefedit':[
                    "a GUI for opening, editing, and saving .kef and .ph5 files",
                    'ph5.utilities.kefedit:startapp'
                    ],
                'noven':[
                    "a GUI for converting CSV metatdata files into kef files for PH5",
                    'ph5.utilities.noven:startapp'
                    ],
                'pforma':[
                    "a GUI for loading MetaData into PH5.",
                    'ph5.utilities.pformagui:startapp'
                    ],
                'ph5view':[
                    "a GUI program for plotting responses, saving files to SEGY, etc.",
                    'ph5.clients.ph5view.ph5_viewer:startapp'
                    ]
                },
            'console_scripts':{
                '125atoph5':[
                    "allows the user to add Texan raw data to the PH5 file.",
                    'ph5.utilities.125a2ph5:main'
                    ],
                '130toph5':[
                    "allows the user to add Reftek RT130 raw data to the PH5 file.",
                    'ph5.utilities.1302ph5:main'
                    ],
                'csvtokef':[
                    "Converts a csv generated by keftocsv to a kef file.",
                    'ph5.utilities.csvtokef:main'
                    ],
                'cross_check_event_array_data':[
                    "Cross check Event, Array, and Data.",
                    'ph5.utilities.cross_check_event_array_data:main'
                    ],
                'delete_table':[
                    "Initialize a table in a ph5 file.",
                    'ph5.utilities.nuke_table:main'
                    ],
                'dumpfair':[
                    "determine how many samples are in Fairfield Node SEG-D files.",
                    'ph5.utilities.dumpfair:main'
                    ],
                'dumpsac':[
                    "Translate and dump a binary SAC file to stdout.",
                    'ph5.utilities.dumpsac:main'
                    ],
                'dumpsgy':[
                    "Translate and dump a binary SEGY file to stdout.",
                    'ph5.utilities.dumpsgy:main'
                    ],
                'fix_3chan_texan':[
                    "For fixing 3-channel Texan data.",
                    'ph5.utilities.fix_3chan_texan:main'
                    ],
                'geo_kef_gen':[
                    "Read locations and calculate offsets from events to receivers, makes kef file for ph5.",
                    'ph5.utilities.geod2kef:main'
                    ],
                'graotoph5':[
                    "Load MSEED data into a family of ph5 files. Can use web services.",
                    'ph5.utilities.grao2ph5:main'
                    ],
                'index_offset_t':[
                    "Index offset table in ph5 file to speed up execution of kernel searches.",
                    'ph5.utilities.index_offset_t:main'
                    ],
                'initialize_ph5':[
                    "Program to initialize PH5 file at start of experiment.",
                    'ph5.utilities.initialize_ph5:main'
                    ],
                'keftocsv':[
                    "Converts a kef (Kitchen Exchange File) file to csv.",
                    'ph5.utilities.keftocsv:main'
                    ],
                'keftokml':[
                    "Converts a kef file to kml format.",
                    'ph5.utilities.kef2kml:main'
                    ],
                'keftoph5':[
                    "Update a ph5 file from a kef file.",
                    'ph5.utilities.kef2ph5:main'
                    ],
                'load_das_t':[
                    "Load a batch of Das_t keffiles.",
                    'ph5.utilities.load_das_t:main'
                    ],
                'metadatatoph5':[
                    "Load metdata in to PH5.",
                    'ph5.utilities.metadatatoph5:main'
                    ],
                'meta_data_gen':[
                    "Write info about receivers, events, or data.",
                    'ph5.utilities.meta_data_gen:main'
                    ],
                'mstoph5':[
                    "Takes data files and converts to PH5.",
                    'ph5.utilities.obspytoph5:main'
                    ],
                'nuke_table':[
                    "Initialize a table in a ph5 file.",
                    'ph5.utilities.nuke_table:main'
                    ],
                'pformacl':[
                    "Create or open a project and process raw data to PH5 in parallel.",
                    'ph5.utilities.pformacl:main'
                    ],
                'ph5toevt':[
                    "a script for extracting events from a ph5 archive",
                    'ph5.clients.ph5view.ph5toevt:main'
                    ],
                'ph5toexml':[
                    "Not available.",
                    'ph5.clients.ph5toexml:main'
                    ],
                'ph5tokef':[
                    "Dump a table to a kef file.",
                    'ph5.utilities.tabletokef:main'
                    ],
                'ph5toms':[
                    "Return mseed from a PH5 file.",
                    'ph5.clients.ph5toms:main'
                    ],
                'ph5torec':[
                    "Generate SEG-Y gathers in receiver order.",
                    'ph5.clients.ph5torec:main'
                    ],
                'ph5tostationxml':[
                    "Takes PH5 files and returns StationXML.",
                    'ph5.clients.ph5tostationxml:main'
                    ],
                'ph5_merge_helper':[
                    "Modify Index_t.kef and miniPH5_xxxxx.ph5 file names so they can be merged.",
                    'ph5.utilities.ph5_merge_helper:main'
                    ],
                'ph5_total':[
                    "Find total size of ph5 files in a directory.",
                    'ph5.utilities.ph5_total:main'
                    ],
                'ph5_validate':[
                    "Runs set of checks on PH5 archive.",
                    'ph5.utilities.ph5validate:main'
                    ],
                'recreate_external_references':[
                    "Rebuild external references under Receivers_g from info in Index_t.",
                    'ph5.utilities.recreate_external_references:main'
                    ],
                'report_gen':[
                    "Generate data_description.txt and/or data_request_key.txt.",
                    'ph5.utilities.report_gen:main'
                    ],
                'reporttoph5':[
                    "Load a report (pdf) into a ph5 file.",
                    'ph5.utilities.report2ph5:main'
                    ],
                'resp_load':[
                    "This fixes n_i numbers in the arrays, creates new array.kef files, loads RESP files into PH5 and creates a new 'response.kef'.",
                    'ph5.utilities.resp_load:main'
                    ],
                'seg2toph5':[
                    "Read data in SEG-2 revision 1 (StrataVisor) into ph5 format.",
                    'ph5.utilities.seg2toph5:main'
                    ],
                'segdtoph5':[
                    "Read a standard SEG-D file and load it into a PH5 file.",
                    'ph5.utilities.segd2ph5:main'
                    ],
                'segytoph5':[
                    "Read a standard SEG-Y file and load it into a PH5 file.",
                    'ph5.utilities.segy2ph5:main'
                    ],
                'set_deploy_pickup_times':[
                    "Set deploy and pickup times in an Array_t_xxx.kef file.",
                    'ph5.utilities.set_deploy_pickup_times:main'
                    ],
                'set_n_i_response':[
                    "Updating the response table references for multiple instrument types.",
                    'ph5.utilities.set_n_i_response:main'
                    ],
                'sort_array_t':[
                    "Sort an Array_t_xxx.kef file by station ID, id_s.",
                    'ph5.utilities.sort_array_t:main'
                    ],
                'sort_kef_gen':[
                    "Generate a kef file to populate Sort_t.",
                    'ph5.utilities.sort_kef_gen:main'
                    ],
                'tabletokef':[
                    "Dump a table to a kef file.",
                    'ph5.utilities.tabletokef:main'
                    ],
                'time_kef_gen':[
                    "Generates kef file to populate Time_t from SOH_A.",
                    'ph5.utilities.time_kef_gen:main'
                    ],
                'unsimpleton':[
                    "A command line utility to link fairfield SEG-D file names that expose information about the contents of the file.",
                    'ph5.utilities.unsimpleton:main'
                    ],
                }
            }

    def getinfo(self,source):
        thispoint = self.entrypoints[source]
        return thispoint
"""
def main(): ## example of usage
	myinfo = entrypointinfo()
	guis = myinfo.getinfo('gui_scripts')
	consoles = myinfo.getinfo('console_scripts')
	print ("Descriptions:")
	print (" ")
	print ("GUI Scripts:")
	##print (guis)

	for item in sorted(guis):
		report = item + ": " + guis[item][0]
		print (report)

	print (" ")
	print ("Console Scripts:")
	##	print (consoles)
	for item in sorted(consoles):
		report = item + ": " + consoles[item][0]
		print (report)


if __name__ == '__main__':
    main()

"""
